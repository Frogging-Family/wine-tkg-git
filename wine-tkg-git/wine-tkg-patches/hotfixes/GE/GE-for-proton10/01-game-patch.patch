From 0b242db6d63ec466c09d47020596ba941ce7cdf2 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Sat, 16 May 2020 20:05:38 -0600
Subject: [PATCH] Revert "dwrite: Release file streams when building
 collections."

This reverts commit d19e34d8f072514cb903bda89767996ba078bae4.
---
 dlls/dwrite/font.c | 2 --
 1 file changed, 2 deletions(-)

diff --git a/dlls/dwrite/font.c b/dlls/dwrite/font.c
index c473a306720..dbf6c611f86 100644
--- a/dlls/dwrite/font.c
+++ b/dlls/dwrite/font.c
@@ -4659,6 +4659,7 @@ HRESULT create_font_collection(IDWriteFactory7 *factory, IDWriteFontFileEnumerat
     BOOL current = FALSE;
     HRESULT hr = S_OK;
     size_t i;
+    const char *sgi = getenv("SteamGameId");
 
     *ret = NULL;
 
@@ -4785,7 +4786,9 @@ HRESULT create_font_collection(IDWriteFactory7 *factory, IDWriteFontFileEnumerat
             }
         }
 
-        IDWriteFontFileStream_Release(stream);
+        if ((!sgi) | (sgi && strcmp(sgi, "244210"))) {
+            IDWriteFontFileStream_Release(stream);
+        }
     }
 
     LIST_FOR_EACH_ENTRY_SAFE(fileenum, fileenum2, &scannedfiles, struct fontfile_enum, entry)
-- 
2.26.2

diff --git a/dlls/ntdll/unix/file.c b/dlls/ntdll/unix/file.c
index eb526f6aa9a..2925252b6c8 100644
--- a/dlls/ntdll/unix/file.c
+++ b/dlls/ntdll/unix/file.c
@@ -3457,6 +3457,7 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
     struct stat st;
     char *unix_name = *buffer;
     const WCHAR *ptr, *end;
+    static char *skip_search = NULL;
 
     /* check syntax of individual components */
 
@@ -3503,6 +3504,13 @@ static NTSTATUS lookup_unix_name( const WCHAR *name, int name_len, char **buffer
     if (is_unix && (disposition == FILE_OPEN || disposition == FILE_OVERWRITE))
         return STATUS_OBJECT_NAME_NOT_FOUND;
 
+    if (skip_search == NULL)
+    {
+        skip_search = getenv("WINE_NO_OPEN_FILE_SEARCH");
+        WARN("Disabling case insensitive search for opening files");
+    }
+    if (skip_search && strcasestr(unix_name, skip_search) && disposition == FILE_OPEN)
+        return STATUS_OBJECT_NAME_NOT_FOUND;
     /* now do it component by component */
 
     while (name_len)
diff --git a/dlls/kernelbase/file.c b/dlls/kernelbase/file.c
index f4f9d14518f..69005607224 100644
--- a/dlls/kernelbase/file.c
+++ b/dlls/kernelbase/file.c
@@ -2918,6 +2918,21 @@ BOOL WINAPI DECLSPEC_HOTPATCH SetCurrentDirectoryW( LPCWSTR dir )
 {
     UNICODE_STRING dirW;
 
+    char str[MAX_PATH];
+    DWORD size = GetEnvironmentVariableA(L"SteamGameId", str, sizeof(str));
+
+    if (size > 0) {
+        if (wcscmp(str, L"218210") == 0) {
+            SIZE_T len = wcslen(dir);
+
+            if (len > 0 && dir[len - 1] == '.') {
+                WCHAR *p = (WCHAR *)dir + len - 1;
+                *p = '\0';
+                FIXME("%s . fixed\n", debugstr_w(dir));
+            }
+        }
+    }
+
     RtlInitUnicodeString( &dirW, dir );
     return set_ntstatus( RtlSetCurrentDirectory_U( &dirW ));
 }
From 4fd6c1a286dd2babd098decf045522be1dff5656 Mon Sep 17 00:00:00 2001
From: Cameron Moore <moore.cameron1111@gmail.com>
Date: Sat, 3 Feb 2024 21:21:50 -0500
Subject: [PATCH] user32: [GAMEFIX] Fix xinput support for Dragon Age
 Inquisition

user32: [GAMEFIX] 1/2 Dragon Age Inquisition: fix xinput support

https://bugs.winehq.org/show_bug.cgi?id=47070

I'm not completely sure on the specifics of why the bug happens,
but there are two main threads involved. Thread A owns the window
object for the game. Thread B makes all the calls to XInputGetState.
However, Thread B checks if the window has focus to receive keyboard
inputs every frame. Thread B calls AttachThreadInput to attach its
message queue to the Thread A's window a few times before the bug
starts occurring along with one separate time at the start where
Thread A attaches Thread B's message queue to the window as well.
The message queue is detached one last time and then Thread B no
longer has access to the window.

My workaround checks GetFocus for when it starts receiving Null
for a response (meaning it does not have access to a window anymore).
Prior to this, AttachThreadInput stores the IDs of the two threads
which call the function the very first time (hopefully this works
with the EA App as I've been debugging this with Origin which doesn't
seem to call either of the two WINAPI functions as long as you load
straight into the game from the Origin library menu). When GetFocus
realizes it does not have a window for the thread, it calls
AttachThreadInput with the two thread IDs. This allows Thread B to
access the window, which let's GetFocus return the proper window
handle, which then let's the program access XInputGetState meaning
the controller finally works.

Anyway, as far as the final cause of the bug: it might be because
of thread prioritization causing Thread B to AttachThreadInput to
be called by it last as the only time Thread A calls it, it does
not detach the message queue afterwards. This leads me to believe
that the bug might just be caused by incomplete wine
functionality / stubs. Although, this part is speculation.

win32u: [GAMEFIX] 2/2 Dragon Age Inquisition: fix xinput support

Wrap hack with a SteamGameId check and cache it.
---
diff --git a/dlls/win32u/input.c b/dlls/win32u/input.c
index 97e651a7ce5..9b7796645b7 100644
--- a/dlls/win32u/input.c
+++ b/dlls/win32u/input.c
@@ -30,6 +30,8 @@
 #pragma makedep unix
 #endif
 
+#include <sys/prctl.h>
+#include <string.h>
 #include "ntstatus.h"
 #define WIN32_NO_STATUS
 #include "win32u_private.h"
@@ -585,8 +587,27 @@ HWND get_capture(void)
 HWND get_focus(void)
 {
     GUITHREADINFO info;
+    HWND retValueWindow;
+    static HWND prev = 0;
+    const char *sgi;
+    static int is_DragonAgeInquis = -1;
+
     info.cbSize = sizeof(info);
-    return NtUserGetGUIThreadInfo( GetCurrentThreadId(), &info ) ? info.hwndFocus : 0;
+    retValueWindow = NtUserGetGUIThreadInfo( GetCurrentThreadId(), &info ) ? info.hwndFocus : 0;
+
+    if (is_DragonAgeInquis)
+    {
+        if ((is_DragonAgeInquis == 1) ||
+            (is_DragonAgeInquis = ((sgi = getenv("SteamGameId")) && !strcmp(sgi, "1222690"))))
+        {
+            if (retValueWindow == 0 && prev != 0)
+                NtUserAttachThreadInput(0, 0, 1);
+            else
+                prev = retValueWindow;
+        }
+    }
+
+    return retValueWindow;
 }
 
 /**********************************************************************
@@ -595,6 +616,41 @@ HWND get_focus(void)
 BOOL WINAPI NtUserAttachThreadInput( DWORD from, DWORD to, BOOL attach )
 {
     BOOL ret;
+    static int visited = 0;
+    static DWORD fromThreadForHack = 0;
+    static DWORD toThreadForHack = 0;
+    static char processNameForHack[16];
+    static const char* DAIprocessName = "DragonAgeInquis";
+    static const char* DAIGameLoopName = "GameLoop";
+    static int is_DragonAgeInquis = -1;
+    const char *sgi;
+
+    if (is_DragonAgeInquis)
+    {
+        if ((is_DragonAgeInquis == 1) ||
+            (is_DragonAgeInquis = ((sgi = getenv("SteamGameId")) && !strcmp(sgi, "1222690"))))
+        {
+            prctl(PR_GET_NAME, processNameForHack);
+            TRACE("Process Name: %s\n", processNameForHack);
+            if (strncmp(DAIprocessName, processNameForHack, 15) == 0 || strncmp(DAIGameLoopName, processNameForHack, 8) == 0)
+            {
+                if (!visited)
+                {
+                    TRACE("First Visit Process Name: %s\n", processNameForHack);
+                    fromThreadForHack = from;
+                    toThreadForHack = to;
+                    visited = 1;
+                }
+
+                if (from == 0 && to == 0 && visited)
+                {
+                    TRACE("00 Process Name: %s\n", processNameForHack);
+                    from = fromThreadForHack;
+                    to = toThreadForHack;
+                }
+            }
+        }
+    }
 
     SERVER_START_REQ( attach_thread_input )
     {
-- 
2.48.1

