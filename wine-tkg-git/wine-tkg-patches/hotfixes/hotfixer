#!/bin/bash

_hotfix_import() {
  if [ -z "$_hotfix_boundary" ] || ( cd "${srcdir}"/"${_winesrcdir}" && ! git merge-base --is-ancestor "$_hotfix_boundary" HEAD ); then
    if ! source "$_where"/wine-tkg-patches/hotfixes/"$_hotfix"/hotfixes; then
      warning "Hotfixer: !!! $_hotfix missing !!!"
    elif [ "$_hotfixes_no_confirm" = "false" ]; then
      msg2 "Hotfixer: $_hotfix loaded"
    fi
  fi
}

if [ "$_unfrog" != "true" ]; then
  if ( cd "${srcdir}"/"${_winesrcdir}" && ! git merge-base --is-ancestor 0c249e6125fc9dc6ee86b4ef6ae0d9fa2fc6291b HEAD ); then
    if [ "$_hotfixes_no_confirm" != "true" ] && [ "$_hotfixes_no_confirm" != "ignore" ]; then
      warning "HALP! We may have some hotfixes for your current tree!"
      read -rp "Do you want to apply them all - if available - with no further prompt?"$'\n> Y/n : ' _hotfixansw;
      if [ "$_hotfixansw" != "n" ] && [ "$_hotfixansw" != "N" ]; then
        _hotfixes_no_confirm="true"
      fi
    fi
  fi

  # Plain reverts/non-patch hotfixes
  _hotfix="01-non-patch-hotfixes" _hotfix_import

  # Custom hotfix patches
  _hotfix="01150d7f" _hotfix_boundary="" _hotfix_import
  _hotfix="proton_fs_hack_staging" _hotfix_boundary="" _hotfix_import
  _hotfix="oldtlb" _hotfix_boundary="" _hotfix_import
  _hotfix="proton_staging_CEG_support" _hotfix_boundary="" _hotfix_import
  _hotfix="mingw-msvcrt-steamhelper" _hotfix_boundary="" _hotfix_import
  _hotfix="GetMappedFileName" _hotfix_boundary="" _hotfix_import
  _hotfix="restore_staging_winepulse" _hotfix_boundary="" _hotfix_import
  _hotfix="steamclient_swap" _hotfix_boundary="" _hotfix_import
  _hotfix="syscall_emu" _hotfix_boundary="" _hotfix_import
  _hotfix="08cccb5" _hotfix_boundary="" _hotfix_import
  _hotfix="a1bda115" _hotfix_boundary="" _hotfix_import
  _hotfix="staging_rawinput" _hotfix_boundary="" _hotfix_import
  _hotfix="dfddef96" _hotfix_boundary="" _hotfix_import
  #_hotfix="RtlGetCurrentUmsThread" _hotfix_boundary="" _hotfix_import # This doesn't actually fix https://bugs.winehq.org/show_bug.cgi?id=51990
  _hotfix="EGS" _hotfix_boundary="" _hotfix_import
  _hotfix="ow2" _hotfix_boundary="" _hotfix_import
  _hotfix="autoconf-opencl-hotfix" _hotfix_boundary="" _hotfix_import
  _hotfix="NosTale" _hotfix_boundary="" _hotfix_import

  # Custom hotfix patches with a commit boundary
  _hotfix="fd799297" _hotfix_boundary="1f6423f778f7036a3875613e10b9c8c3b84584f0" _hotfix_import
  _hotfix="mfplat" _hotfix_boundary="8c8cf0896bf80ce5a30fff84a944dd29c550aefb" _hotfix_import
  _hotfix="restore_staging_mfplat" _hotfix_boundary="53cb28e6d9daa7cbcc190cd02aeaba37c297adc4" _hotfix_import
  _hotfix="childwindow" _hotfix_boundary="656edbb508d51cbe3155d856ee3f2c27a6cd4cba" _hotfix_import
  _hotfix="memset" _hotfix_boundary="7c046c7afd4253daa9cd8dbb6b2f466f128fecc9" _hotfix_import
  _hotfix="hid_Remi_6.18release" _hotfix_boundary="9421dd2b3cd7114bf390c3ffcec30ab4bc95b7ef" _hotfix_import
  _hotfix="414b31b" _hotfix_boundary="026b192018e254c74c6a1f07d82637716ff48e8d" _hotfix_import
  _hotfix="wineserver_socket_spin" _hotfix_boundary="361435f6095f8c759979600b06ed28785e7b3aec" _hotfix_import
  _hotfix="308a5e7c" _hotfix_boundary="79c102d6bec81b79e10290f23e9ac3816da6b58f" _hotfix_import
  _hotfix="logf" _hotfix_boundary="673815e0edb7a3a505b8a8b39a79f97c8ce8fc32" _hotfix_import
  _hotfix="the_witcher_iii" _hotfix_boundary="1722615b06cba2f04fcd0ca69bbc33d963fb143f" _hotfix_import
  _hotfix="shell32-Progress_Dialog" _hotfix_boundary="27040a4f009f1e35a540882dc150d14431de64a8" _hotfix_import
  _hotfix="autoconf-legacy-fix" _hotfix_boundary="d7645b67c350f7179a1eba749ec4524c74948d86" _hotfix_import
  _hotfix="370a538e" _hotfix_boundary="db87636c91e5dca657150361fa9aabfe62ddf38c" _hotfix_import
  _hotfix="SetThreadInformation" _hotfix_boundary="15aa8c6fb81921811cb2c7f99ae43f31930b4c10" _hotfix_import
  _hotfix="larger_def_heap" _hotfix_boundary="1d65bc06b303dc19307c1a1c26603d690ffa7f12" _hotfix_import
  _hotfix="a2395ecf" _hotfix_boundary="a42b22e027e2be20f7f3a924eddeee92b7bbc99d" _hotfix_import
  _hotfix="1e35966" _hotfix_boundary="7b51216198237c04a8994cda1bdb45fdb4482b32" _hotfix_import
  _hotfix="staging_aeddc19_SOURCES" _hotfix_boundary="137638e185e9302602bcd9cc796d7bcfa03caee5" _hotfix_import
  _hotfix="rdr2" _hotfix_boundary="ce2ae79f9d9c64bbac54701e6538cd9dca1b8ae7" _hotfix_import
  _hotfix="winewayland" _hotfix_boundary="1e701a6b3798ecfd688ad1ff405dbb62b3d214c6" _hotfix_import
else
  _hotfix="valve" _hotfix_boundary="" _hotfix_import
  _hotfix="GE" _hotfix_boundary="" _hotfix_import
  _hotfix="NosTale" _hotfix_boundary="" _hotfix_import
fi

hotfixer() {
  for _f in "${_hotfixes[@]}"; do
    if [ -e "${_f}.${_userpatch_ext}revert" ]; then
      msg2 "## Applying reverting hotfix for ${_userpatch_target}: ${_f##*/}.${_userpatch_ext}revert"
      echo -e "\nApplying reverting hotfix ${_f##*/wine-tkg-git/}.${_userpatch_ext}revert" >> "$_where"/prepare.log
      if ! patch -Np1 -R < "${_f}.${_userpatch_ext}revert" >> "$_where"/prepare.log; then
        error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience."
        if [ -n "$_last_known_good_mainline" ] || [ -n "$_last_known_good_staging" ]; then
          msg2 "To use the last known good mainline version, please set _plain_version=\"$_last_known_good_mainline\" in your .cfg"
          msg2 "To use the last known good staging version, please set _staging_version=\"$_last_known_good_staging\" in your .cfg (requires _use_staging=\"true\")"
        fi
        exit 1
      fi
      echo "Applied reverting hotfix ${_f##*/}.${_userpatch_ext}revert" >> "$_where"/last_build_config.log
    fi
  done
  for _f in "${_hotfixes[@]}"; do
    if [ -e "${_f}.${_userpatch_ext}patch" ]; then
      msg2 "## Applying hotfix for ${_userpatch_target}: ${_f##*/}.${_userpatch_ext}patch"
      echo -e "\nApplying hotfix ${_f##*/wine-tkg-git/}.${_userpatch_ext}patch" >> "$_where"/prepare.log
      if ! patch -Np1 < "${_f}.${_userpatch_ext}patch" >> "$_where"/prepare.log; then
        error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience."
        if [ -n "$_last_known_good_mainline" ] || [ -n "$_last_known_good_staging" ]; then
          msg2 "To use the last known good mainline version, please set _plain_version=\"$_last_known_good_mainline\" in your .cfg"
          msg2 "To use the last known good staging version, please set _staging_version=\"$_last_known_good_staging\" in your .cfg (requires _use_staging=\"true\")"
        fi
        exit 1
      fi
      echo "Applied hotfix ${_f##*/}.${_userpatch_ext}patch" >> "$_where"/last_build_config.log
    fi
  done
}
