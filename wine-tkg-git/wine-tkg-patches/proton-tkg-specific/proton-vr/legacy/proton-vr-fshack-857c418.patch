From 4ad17bc8a5651c65b7e1bced3c9e04bce9f77c91 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Wed, 4 Apr 2018 17:05:37 +0200
Subject: [PATCH 01/12] wined3d: Implement GL texture access callbacks.

---
 dlls/wined3d/cs.c              | 52 ++++++++++++++++++++++++++++++++++
 dlls/wined3d/texture.c         | 10 +++++++
 dlls/wined3d/wined3d_private.h |  3 ++
 include/wine/wined3d.h         |  5 ++++
 4 files changed, 70 insertions(+)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 21aaa2e54b6..e291e2b550d 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -77,6 +77,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_COPY_UAV_COUNTER,
     WINED3D_CS_OP_GENERATE_MIPMAPS,
     WINED3D_CS_OP_EXECUTE_COMMAND_LIST,
+    WINED3D_CS_OP_GL_TEXTURE_CALLBACK,
     WINED3D_CS_OP_STOP,
 };
 
@@ -457,6 +458,15 @@ struct wined3d_cs_generate_mipmaps
     struct wined3d_shader_resource_view *view;
 };
 
+struct wined3d_cs_gl_texture_callback
+{
+    enum wined3d_cs_op opcode;
+    struct wined3d_texture *texture;
+    wined3d_gl_texture_callback callback;
+    unsigned int data_size;
+    BYTE data[1];
+};
+
 struct wined3d_cs_stop
 {
     enum wined3d_cs_op opcode;
@@ -2698,6 +2708,44 @@ void wined3d_device_context_emit_generate_mipmaps(struct wined3d_device_context
     wined3d_device_context_submit(context, WINED3D_CS_QUEUE_DEFAULT);
 }
 
+static void wined3d_cs_exec_gl_texture_callback(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_gl_texture_callback *op = data;
+    struct wined3d_texture_gl *texture = wined3d_texture_gl(op->texture);
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
+
+    context = context_acquire(cs->c.device, NULL, 0);
+    gl_info = wined3d_context_gl(context)->gl_info;
+
+    wined3d_texture_load_location(&texture->t, 0, context, WINED3D_LOCATION_TEXTURE_RGB);
+
+    op->callback(texture->texture_rgb.name, op->data, op->data_size);
+
+    context_invalidate_compute_state(context, STATE_COMPUTE_SHADER_RESOURCE_BINDING);
+    context_invalidate_state(context, STATE_GRAPHICS_SHADER_RESOURCE_BINDING);
+
+    checkGLcall("texture callback\n");
+
+    context_release(context);
+
+}
+
+void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_texture *texture,
+        wined3d_gl_texture_callback callback, const void *data, unsigned int size)
+{
+    struct wined3d_cs_gl_texture_callback *op;
+
+    op = cs->c.ops->require_space(cs, sizeof(*op) + size, WINED3D_CS_QUEUE_DEFAULT);
+    op->opcode = WINED3D_CS_OP_GL_TEXTURE_CALLBACK;
+    op->texture = texture;
+    op->callback = callback;
+    op->data_size = size;
+    memcpy(op->data, data, size);
+
+    cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
+}
+
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
@@ -2865,6 +2916,7 @@ static void (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_COPY_UAV_COUNTER            */ wined3d_cs_exec_copy_uav_counter,
     /* WINED3D_CS_OP_GENERATE_MIPMAPS            */ wined3d_cs_exec_generate_mipmaps,
     /* WINED3D_CS_OP_EXECUTE_COMMAND_LIST        */ wined3d_cs_exec_execute_command_list,
+    /* WINED3D_CS_OP_GL_TEXTURE_CALLBACK         */ wined3d_cs_exec_gl_texture_callback,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_device_context *context,
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index 39e6e2a68b7..bdcd0b55ae6 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -4574,6 +4574,16 @@ void wined3d_texture_download_from_texture(struct wined3d_texture *dst_texture,
     wined3d_texture_invalidate_location(dst_texture, dst_sub_resource_idx, ~dst_location);
 }
 
+void CDECL wined3d_access_gl_texture(struct wined3d_texture *texture,
+        wined3d_gl_texture_callback callback, const void *data, unsigned int size)
+{
+    struct wined3d_device *device = texture->resource.device;
+
+    TRACE("texture %p, callback %p, data %p, size %u.\n", texture, callback, data, size);
+
+    wined3d_cs_emit_gl_texture_callback(device->cs, texture, callback, data, size);
+}
+
 static void wined3d_texture_no3d_upload_data(struct wined3d_context *context,
         const struct wined3d_const_bo_address *src_bo_addr, const struct wined3d_format *src_format,
         const struct wined3d_box *src_box, unsigned int src_row_pitch, unsigned int src_slice_pitch,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index f5b1a078907..756d47ef20d 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4762,6 +4762,9 @@ static inline void wined3d_cs_finish(struct wined3d_cs *cs, enum wined3d_cs_queu
     cs->c.ops->finish(&cs->c, queue_id);
 }
 
+void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_texture *texture,
+        wined3d_gl_texture_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
+
 static inline void wined3d_device_context_push_constants(struct wined3d_device_context *context,
         enum wined3d_push_constants p, unsigned int start_idx, unsigned int count, const void *constants)
 {
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index dd1c15f14ed..2123e857a52 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2969,6 +2969,11 @@ ULONG __cdecl wined3d_vertex_declaration_incref(struct wined3d_vertex_declaratio
 HRESULT __cdecl wined3d_extract_shader_input_signature_from_dxbc(struct wined3d_shader_signature *signature,
         const void *byte_code, SIZE_T byte_code_size);
 
+typedef void (__cdecl *wined3d_gl_texture_callback)(unsigned int gl_texture, const void *data, unsigned int size);
+
+void __cdecl wined3d_access_gl_texture(struct wined3d_texture *texture,
+        wined3d_gl_texture_callback callback, const void *data, unsigned int size);
+
 /* Return the integer base-2 logarithm of x. Undefined for x == 0. */
 static inline unsigned int wined3d_log2i(unsigned int x)
 {
-- 
2.30.2

From 34565d56b8cfcdcf787c5a3a0466f990918d1139 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Wed, 4 Apr 2018 17:05:37 +0200
Subject: [PATCH 02/12] wined3d: Implement command stream callbacks.

---
 dlls/wined3d/cs.c              | 40 ++++++++++++++++++++++++++++++++++
 dlls/wined3d/device.c          |  8 +++++++
 dlls/wined3d/wined3d_private.h |  2 ++
 include/wine/wined3d.h         |  5 +++++
 4 files changed, 55 insertions(+)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index e291e2b550d..cf55385c3c1 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -78,6 +78,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_GENERATE_MIPMAPS,
     WINED3D_CS_OP_EXECUTE_COMMAND_LIST,
     WINED3D_CS_OP_GL_TEXTURE_CALLBACK,
+    WINED3D_CS_OP_USER_CALLBACK,
     WINED3D_CS_OP_STOP,
 };
 
@@ -467,6 +468,14 @@ struct wined3d_cs_gl_texture_callback
     BYTE data[1];
 };
 
+struct wined3d_cs_user_callback
+{
+    enum wined3d_cs_op opcode;
+    wined3d_cs_callback callback;
+    unsigned int data_size;
+    BYTE data[1];
+};
+
 struct wined3d_cs_stop
 {
     enum wined3d_cs_op opcode;
@@ -2749,6 +2758,36 @@ void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_t
     cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
 
+static void wined3d_cs_exec_user_callback(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_user_callback *op = data;
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
+
+    context = context_acquire(cs->c.device, NULL, 0);
+    gl_info = wined3d_context_gl(context)->gl_info;
+
+    op->callback(op->data, op->data_size);
+
+    checkGLcall("user callback\n");
+
+    context_release(context);
+}
+
+void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
+        wined3d_cs_callback callback, const void *data, unsigned int size)
+{
+    struct wined3d_cs_user_callback *op;
+
+    op = cs->c.ops->require_space(cs, sizeof(*op) + size, WINED3D_CS_QUEUE_DEFAULT);
+    op->opcode = WINED3D_CS_OP_USER_CALLBACK;
+    op->callback = callback;
+    op->data_size = size;
+    memcpy(op->data, data, size);
+
+    cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
+}
+
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
@@ -2893,6 +2932,7 @@ static void (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_GENERATE_MIPMAPS            */ wined3d_cs_exec_generate_mipmaps,
     /* WINED3D_CS_OP_EXECUTE_COMMAND_LIST        */ wined3d_cs_exec_execute_command_list,
     /* WINED3D_CS_OP_GL_TEXTURE_CALLBACK         */ wined3d_cs_exec_gl_texture_callback,
+    /* WINED3D_CS_OP_USER_CALLBACK               */ wined3d_cs_exec_user_callback,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_device_context *context,
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 484130b3103..286d4d3acf5 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -6320,3 +6320,11 @@ LRESULT device_process_message(struct wined3d_device *device, HWND window, BOOL
     else
         return CallWindowProcA(proc, window, message, wparam, lparam);
 }
+
+void CDECL wined3d_device_run_cs_callback(struct wined3d_device *device,
+        wined3d_cs_callback callback, const void *data, unsigned int size)
+{
+    TRACE("device %p, callback %p, data %p, size %u.\n", device, callback, data, size);
+
+    wined3d_cs_emit_user_callback(device->cs, callback, data, size);
+}
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 756d47ef20d..602647b1e94 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4764,6 +4764,8 @@ static inline void wined3d_cs_finish(struct wined3d_cs *cs, enum wined3d_cs_queu
 
 void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_texture *texture,
         wined3d_gl_texture_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
+        wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
 
 static inline void wined3d_device_context_push_constants(struct wined3d_device_context *context,
         enum wined3d_push_constants p, unsigned int start_idx, unsigned int count, const void *constants)
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 2123e857a52..39689bdb4e1 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2974,6 +2974,11 @@ typedef void (__cdecl *wined3d_gl_texture_callback)(unsigned int gl_texture, con
 void __cdecl wined3d_access_gl_texture(struct wined3d_texture *texture,
         wined3d_gl_texture_callback callback, const void *data, unsigned int size);
 
+typedef void (__cdecl *wined3d_cs_callback)(const void *data, unsigned int size);
+
+void __cdecl wined3d_device_run_cs_callback(struct wined3d_device *device,
+        wined3d_cs_callback callback, const void *data, unsigned int size);
+
 /* Return the integer base-2 logarithm of x. Undefined for x == 0. */
 static inline unsigned int wined3d_log2i(unsigned int x)
 {
-- 
2.30.2

From 434e12794d7dda50554dbcf781af282816d39121 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Wed, 4 Apr 2018 17:05:37 +0200
Subject: [PATCH 03/12] d3d11: Add IWineD3D11Texture2D interface.

---
 dlls/d3d11/d3d11_private.h       |  4 +-
 dlls/d3d11/device.c              |  4 +-
 dlls/d3d11/texture.c             | 65 +++++++++++++++++++++-----------
 include/Makefile.in              |  1 +
 include/wine/wined3d-interop.idl | 31 +++++++++++++++
 5 files changed, 80 insertions(+), 25 deletions(-)
 create mode 100644 include/wine/wined3d-interop.idl

diff --git a/dlls/d3d11/d3d11_private.h b/dlls/d3d11/d3d11_private.h
index 1a8cdc6d77c..2b1809726ca 100644
--- a/dlls/d3d11/d3d11_private.h
+++ b/dlls/d3d11/d3d11_private.h
@@ -39,6 +39,8 @@
 #include "wine/winedxgi.h"
 #include "wine/rbtree.h"
 
+#include "wine/wined3d-interop.h"
+
 #define MAKE_TAG(ch0, ch1, ch2, ch3) \
     ((DWORD)(ch0) | ((DWORD)(ch1) << 8) | \
     ((DWORD)(ch2) << 16) | ((DWORD)(ch3) << 24 ))
@@ -144,7 +146,7 @@ struct d3d_texture1d *unsafe_impl_from_ID3D10Texture1D(ID3D10Texture1D *iface) D
 /* ID3D11Texture2D, ID3D10Texture2D */
 struct d3d_texture2d
 {
-    ID3D11Texture2D ID3D11Texture2D_iface;
+    IWineD3D11Texture2D ID3D11Texture2D_iface;
     ID3D10Texture2D ID3D10Texture2D_iface;
     LONG refcount;
 
diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 0819918b2a1..41967dd0a1c 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -3165,7 +3165,7 @@ static HRESULT STDMETHODCALLTYPE d3d11_device_CreateTexture2D(ID3D11Device2 *ifa
     if (FAILED(hr = d3d_texture2d_create(device, desc, data, &object)))
         return hr;
 
-    *texture = &object->ID3D11Texture2D_iface;
+    *texture = (ID3D11Texture2D *)&object->ID3D11Texture2D_iface;
 
     return S_OK;
 }
@@ -6594,7 +6594,7 @@ static HRESULT CDECL device_parent_create_swapchain_texture(struct wined3d_devic
 
     *wined3d_texture = texture->wined3d_texture;
     wined3d_texture_incref(*wined3d_texture);
-    ID3D11Texture2D_Release(&texture->ID3D11Texture2D_iface);
+    IWineD3D11Texture2D_Release(&texture->ID3D11Texture2D_iface);
 
     return S_OK;
 }
diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index 061bbb09795..dd21c6d7f08 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -518,14 +518,21 @@ HRESULT d3d_texture1d_create(struct d3d_device *device, const D3D11_TEXTURE1D_DE
 
 /* ID3D11Texture2D methods */
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(ID3D11Texture2D *iface, REFIID riid, void **object)
+static inline struct d3d_texture2d *impl_from_IWineD3D11Texture2D(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
-    HRESULT hr;
+    return CONTAINING_RECORD(iface, struct d3d_texture2d, ID3D11Texture2D_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(IWineD3D11Texture2D *iface,
+        REFIID riid, void **object)
+{
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
+    HRESULT hr;
 
     TRACE("iface %p, riid %s, object %p.\n", iface, debugstr_guid(riid), object);
 
-    if (IsEqualGUID(riid, &IID_ID3D11Texture2D)
+    if (IsEqualGUID(riid, &IID_IWineD3D11Texture2D)
+            || IsEqualGUID(riid, &IID_ID3D11Texture2D)
             || IsEqualGUID(riid, &IID_ID3D11Resource)
             || IsEqualGUID(riid, &IID_ID3D11DeviceChild)
             || IsEqualGUID(riid, &IID_IUnknown))
@@ -554,9 +561,9 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_QueryInterface(ID3D11Texture2D
     return E_NOINTERFACE;
 }
 
-static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(ID3D11Texture2D *iface)
+static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     ULONG refcount = InterlockedIncrement(&texture->refcount);
 
     TRACE("%p increasing refcount to %u.\n", texture, refcount);
@@ -572,9 +579,9 @@ static ULONG STDMETHODCALLTYPE d3d11_texture2d_AddRef(ID3D11Texture2D *iface)
     return refcount;
 }
 
-static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(ID3D11Texture2D *iface)
+static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(IWineD3D11Texture2D *iface)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     ULONG refcount = InterlockedDecrement(&texture->refcount);
 
     TRACE("%p decreasing refcount to %u.\n", texture, refcount);
@@ -594,9 +601,9 @@ static ULONG STDMETHODCALLTYPE d3d11_texture2d_Release(ID3D11Texture2D *iface)
     return refcount;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(ID3D11Texture2D *iface, ID3D11Device **device)
+static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(IWineD3D11Texture2D *iface, ID3D11Device **device)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
 
     TRACE("iface %p, device %p.\n", iface, device);
 
@@ -604,10 +611,10 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDevice(ID3D11Texture2D *iface,
     ID3D11Device_AddRef(*device);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(IWineD3D11Texture2D *iface,
         REFGUID guid, UINT *data_size, void *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGIResource *dxgi_resource;
     HRESULT hr;
 
@@ -624,10 +631,10 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_GetPrivateData(ID3D11Texture2D
     return d3d_get_private_data(&texture->private_store, guid, data_size, data);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(IWineD3D11Texture2D *iface,
         REFGUID guid, UINT data_size, const void *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGIResource *dxgi_resource;
     HRESULT hr;
 
@@ -644,10 +651,10 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateData(ID3D11Texture2D
     return d3d_set_private_data(&texture->private_store, guid, data_size, data);
 }
 
-static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(ID3D11Texture2D *iface,
+static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(IWineD3D11Texture2D *iface,
         REFGUID guid, const IUnknown *data)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     IDXGIResource *dxgi_resource;
     HRESULT hr;
 
@@ -664,7 +671,7 @@ static HRESULT STDMETHODCALLTYPE d3d11_texture2d_SetPrivateDataInterface(ID3D11T
     return d3d_set_private_data_interface(&texture->private_store, guid, data);
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetType(ID3D11Texture2D *iface,
+static void STDMETHODCALLTYPE d3d11_texture2d_GetType(IWineD3D11Texture2D *iface,
         D3D11_RESOURCE_DIMENSION *resource_dimension)
 {
     TRACE("iface %p, resource_dimension %p.\n", iface, resource_dimension);
@@ -672,21 +679,21 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetType(ID3D11Texture2D *iface,
     *resource_dimension = D3D11_RESOURCE_DIMENSION_TEXTURE2D;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_SetEvictionPriority(ID3D11Texture2D *iface, UINT eviction_priority)
+static void STDMETHODCALLTYPE d3d11_texture2d_SetEvictionPriority(IWineD3D11Texture2D *iface, UINT eviction_priority)
 {
     FIXME("iface %p, eviction_priority %#x stub!\n", iface, eviction_priority);
 }
 
-static UINT STDMETHODCALLTYPE d3d11_texture2d_GetEvictionPriority(ID3D11Texture2D *iface)
+static UINT STDMETHODCALLTYPE d3d11_texture2d_GetEvictionPriority(IWineD3D11Texture2D *iface)
 {
     FIXME("iface %p stub!\n", iface);
 
     return 0;
 }
 
-static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(ID3D11Texture2D *iface, D3D11_TEXTURE2D_DESC *desc)
+static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(IWineD3D11Texture2D *iface, D3D11_TEXTURE2D_DESC *desc)
 {
-    struct d3d_texture2d *texture = impl_from_ID3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     struct wined3d_resource_desc wined3d_desc;
 
     TRACE("iface %p, desc %p.\n", iface, desc);
@@ -708,7 +715,19 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(ID3D11Texture2D *iface, D3
     desc->SampleDesc.Quality = wined3d_desc.multisample_quality;
 }
 
-static const struct ID3D11Texture2DVtbl d3d11_texture2d_vtbl =
+static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Texture2D *iface,
+        gl_texture_callback callback, const void *data, unsigned int size)
+{
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
+
+    TRACE("iface %p, callback %p, data %p, size %u.\n", iface, callback, data, size);
+
+    wined3d_mutex_lock();
+    wined3d_access_gl_texture(texture->wined3d_texture, callback, data, size);
+    wined3d_mutex_unlock();
+}
+
+static const struct IWineD3D11Texture2DVtbl d3d11_texture2d_vtbl =
 {
     /* IUnknown methods */
     d3d11_texture2d_QueryInterface,
@@ -725,13 +744,15 @@ static const struct ID3D11Texture2DVtbl d3d11_texture2d_vtbl =
     d3d11_texture2d_GetEvictionPriority,
     /* ID3D11Texture2D methods */
     d3d11_texture2d_GetDesc,
+    /* IWineD3D11Texture methods */
+    d3d11_texture2d_access_gl_texture,
 };
 
 struct d3d_texture2d *unsafe_impl_from_ID3D11Texture2D(ID3D11Texture2D *iface)
 {
     if (!iface)
         return NULL;
-    assert(iface->lpVtbl == &d3d11_texture2d_vtbl);
+    assert(iface->lpVtbl == (void *)&d3d11_texture2d_vtbl);
     return CONTAINING_RECORD(iface, struct d3d_texture2d, ID3D11Texture2D_iface);
 }
 
diff --git a/include/Makefile.in b/include/Makefile.in
index 9822bce6bdd..d9b646f7de1 100644
--- a/include/Makefile.in
+++ b/include/Makefile.in
@@ -770,6 +770,7 @@ SOURCES = \
 	wine/winbase16.h \
 	wine/windef16.h \
 	wine/wine_common_ver.rc \
+	wine/wined3d-interop.idl \
 	wine/wined3d.h \
 	wine/winedxgi.idl \
 	wine/wingdi16.h \
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
new file mode 100644
index 00000000000..884baf958c2
--- /dev/null
+++ b/include/wine/wined3d-interop.idl
@@ -0,0 +1,35 @@
+/*
+ * Copyright 2018 Józef Kucia for CodeWeavers
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
+ */
+
+#if 0
+#pragma makedep header install
+#endif
+
+typedef void (__cdecl *gl_texture_callback)(unsigned int gl_texture, const void *data, unsigned int data_size);
+
+import "d3d11.idl";
+
+[
+    object,
+    local,
+    uuid(267dc993-d15e-4015-aaac-b7559e226cc3)
+]
+interface IWineD3D11Texture2D : ID3D11Texture2D
+{
+    void access_gl_texture(gl_texture_callback callback, const void *data, unsigned int data_size);
+}
-- 
2.30.2

From 17c027811a6641eea3298f5cb24c69c796dca328 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Wed, 4 Apr 2018 17:05:37 +0200
Subject: [PATCH 04/12] d3d11: Add IWineD3D11Device interface.

---
 dlls/d3d11/d3d11_private.h       |  1 +
 dlls/d3d11/device.c              | 52 ++++++++++++++++++++++++++++++++
 include/wine/wined3d-interop.idl | 12 ++++++++
 3 files changed, 65 insertions(+)

diff --git a/dlls/d3d11/d3d11_private.h b/dlls/d3d11/d3d11_private.h
index 2b1809726ca..ec0bd79fdd5 100644
--- a/dlls/d3d11/d3d11_private.h
+++ b/dlls/d3d11/d3d11_private.h
@@ -564,6 +564,7 @@ struct d3d_device
     ID3D10Multithread ID3D10Multithread_iface;
     IWineDXGIDeviceParent IWineDXGIDeviceParent_iface;
     IUnknown *outer_unk;
+    IWineD3D11Device IWineD3D11Device_iface;
     LONG refcount;
 
     BOOL d3d11_only;
diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 41967dd0a1c..887e7de00e9 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -3119,6 +3119,53 @@ static ULONG STDMETHODCALLTYPE d3d11_device_Release(ID3D11Device2 *iface)
     return IUnknown_Release(device->outer_unk);
 }
 
+/* IWineD3D11Device methods */
+
+static inline struct d3d_device *impl_from_IWineD3D11Device(IWineD3D11Device *iface)
+{
+    return CONTAINING_RECORD(iface, struct d3d_device, IWineD3D11Device_iface);
+}
+
+static HRESULT STDMETHODCALLTYPE wine_device_QueryInterface(IWineD3D11Device *iface, REFIID riid, void **out)
+{
+    struct d3d_device *device = impl_from_IWineD3D11Device(iface);
+    return IUnknown_QueryInterface(device->outer_unk, riid, out);
+}
+
+static ULONG STDMETHODCALLTYPE wine_device_AddRef(IWineD3D11Device *iface)
+{
+    struct d3d_device *device = impl_from_IWineD3D11Device(iface);
+    return IUnknown_AddRef(device->outer_unk);
+}
+
+static ULONG STDMETHODCALLTYPE wine_device_Release(IWineD3D11Device *iface)
+{
+    struct d3d_device *device = impl_from_IWineD3D11Device(iface);
+    return IUnknown_Release(device->outer_unk);
+}
+
+static void STDMETHODCALLTYPE wine_device_run_on_command_stream(IWineD3D11Device *iface,
+        user_cs_callback callback, const void *data, unsigned int data_size)
+{
+    struct d3d_device *device = impl_from_IWineD3D11Device(iface);
+
+    TRACE("iface %p, callback %p, data %p, data_size %u.\n", iface, callback, data, data_size);
+
+    wined3d_mutex_lock();
+    wined3d_device_run_cs_callback(device->wined3d_device, callback, data, data_size);
+    wined3d_mutex_unlock();
+}
+
+static const struct IWineD3D11DeviceVtbl wine_device_vtbl =
+{
+    /* IUnknown methods */
+    wine_device_QueryInterface,
+    wine_device_AddRef,
+    wine_device_Release,
+    /* IWineD3D11Device methods */
+    wine_device_run_on_command_stream,
+};
+
 static HRESULT STDMETHODCALLTYPE d3d11_device_CreateBuffer(ID3D11Device2 *iface, const D3D11_BUFFER_DESC *desc,
         const D3D11_SUBRESOURCE_DATA *data, ID3D11Buffer **buffer)
 {
@@ -4264,6 +4311,10 @@ static HRESULT STDMETHODCALLTYPE d3d_device_inner_QueryInterface(IUnknown *iface
     {
         *out = &device->IWineDXGIDeviceParent_iface;
     }
+    else if (IsEqualGUID(riid, &IID_IWineD3D11Device))
+    {
+        *out = &device->IWineD3D11Device_iface;
+    }
     else
     {
         WARN("%s not implemented, returning E_NOINTERFACE.\n", debugstr_guid(riid));
@@ -6648,6 +6699,7 @@ void d3d_device_init(struct d3d_device *device, void *outer_unknown)
     device->ID3D10Device1_iface.lpVtbl = &d3d10_device1_vtbl;
     device->ID3D10Multithread_iface.lpVtbl = &d3d10_multithread_vtbl;
     device->IWineDXGIDeviceParent_iface.lpVtbl = &d3d_dxgi_device_parent_vtbl;
+    device->IWineD3D11Device_iface.lpVtbl = &wine_device_vtbl;
     device->device_parent.ops = &d3d_wined3d_device_parent_ops;
     device->refcount = 1;
     /* COM aggregation always takes place */
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
index 884baf958c2..d5c91623b3c 100644
--- a/include/wine/wined3d-interop.idl
+++ b/include/wine/wined3d-interop.idl
@@ -29,3 +29,15 @@ interface IWineD3D11Texture2D : ID3D11Texture2D
 {
     void access_gl_texture(gl_texture_callback callback, const void *data, unsigned int data_size);
 }
+
+typedef void (__cdecl *user_cs_callback)(const void *data, unsigned int data_size);
+
+[
+    object,
+    local,
+    uuid(8f02de7e-d55d-457b-9423-83456e49c58a)
+]
+interface IWineD3D11Device : IUnknown
+{
+    void run_on_command_stream(user_cs_callback callback, const void *data, unsigned int data_size);
+}
-- 
2.30.2

From af8a3f1e0c505ecb0a2f6a899989431e85013f74 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Thu, 19 Apr 2018 14:04:49 +0200
Subject: [PATCH 05/12] wined3d: Implement wined3d_device_wait_idle().

---
 dlls/d3d11/device.c              | 12 ++++++++++++
 dlls/wined3d/cs.c                | 20 ++++++++++++++++++++
 dlls/wined3d/device.c            |  7 +++++++
 dlls/wined3d/wined3d_private.h   |  1 +
 include/wine/wined3d-interop.idl |  2 ++
 include/wine/wined3d.h           |  1 +
 6 files changed, 43 insertions(+)

diff --git a/dlls/d3d11/device.c b/dlls/d3d11/device.c
index 887e7de00e9..1ff3f32f2c2 100644
--- a/dlls/d3d11/device.c
+++ b/dlls/d3d11/device.c
@@ -3156,6 +3156,17 @@ static void STDMETHODCALLTYPE wine_device_run_on_command_stream(IWineD3D11Device
     wined3d_mutex_unlock();
 }
 
+static void STDMETHODCALLTYPE wine_device_wait_idle(IWineD3D11Device *iface)
+{
+    struct d3d_device *device = impl_from_IWineD3D11Device(iface);
+
+    TRACE("iface %p.\n", iface);
+
+    wined3d_mutex_lock();
+    wined3d_device_wait_idle(device->wined3d_device);
+    wined3d_mutex_unlock();
+}
+
 static const struct IWineD3D11DeviceVtbl wine_device_vtbl =
 {
     /* IUnknown methods */
@@ -3164,6 +3175,7 @@ static const struct IWineD3D11DeviceVtbl wine_device_vtbl =
     wine_device_Release,
     /* IWineD3D11Device methods */
     wine_device_run_on_command_stream,
+    wine_device_wait_idle,
 };
 
 static HRESULT STDMETHODCALLTYPE d3d11_device_CreateBuffer(ID3D11Device2 *iface, const D3D11_BUFFER_DESC *desc,
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index cf55385c3c1..0eeabdb6640 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -476,6 +477,11 @@ struct wined3d_cs_user_callback
     BYTE data[1];
 };
 
+struct wined3d_cs_wait_idle
+{
+    enum wined3d_cs_op opcode;
+};
+
 struct wined3d_cs_stop
 {
     enum wined3d_cs_op opcode;
@@ -2788,6 +2794,19 @@ void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
     cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
 
+static void wined3d_cs_exec_wait_idle(struct wined3d_cs *cs, const void *data) {}
+
+void wined3d_cs_emit_wait_idle(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_wait_idle *op;
+
+    op = cs->c.ops->require_space(cs, sizeof(*op), WINED3D_CS_QUEUE_DEFAULT);
+    op->opcode = WINED3D_CS_OP_WAIT_IDLE;
+
+    cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
+    cs->c.ops->finish(cs, WINED3D_CS_QUEUE_DEFAULT);
+}
+
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 286d4d3acf5..a3e41cb38ef 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -6328,3 +6328,10 @@ void CDECL wined3d_device_run_cs_callback(struct wined3d_device *device,
 
     wined3d_cs_emit_user_callback(device->cs, callback, data, size);
 }
+
+void CDECL wined3d_device_wait_idle(struct wined3d_device *device)
+{
+    TRACE("device %p.\n", device);
+
+    wined3d_cs_emit_wait_idle(device->cs);
+}
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 602647b1e94..8a38f6d4925 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4766,6 +4766,7 @@ void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_t
         wined3d_gl_texture_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
         wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
+void wined3d_cs_emit_wait_idle(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 
 static inline void wined3d_device_context_push_constants(struct wined3d_device_context *context,
         enum wined3d_push_constants p, unsigned int start_idx, unsigned int count, const void *constants)
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
index d5c91623b3c..6f8ea3770e3 100644
--- a/include/wine/wined3d-interop.idl
+++ b/include/wine/wined3d-interop.idl
@@ -40,4 +40,6 @@ typedef void (__cdecl *user_cs_callback)(const void *data, unsigned int data_siz
 interface IWineD3D11Device : IUnknown
 {
     void run_on_command_stream(user_cs_callback callback, const void *data, unsigned int data_size);
+
+    void wait_idle();
 }
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 39689bdb4e1..c90a71dbd5b 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2978,6 +2978,7 @@ typedef void (__cdecl *wined3d_cs_callback)(const void *data, unsigned int size)
 
 void __cdecl wined3d_device_run_cs_callback(struct wined3d_device *device,
         wined3d_cs_callback callback, const void *data, unsigned int size);
+void __cdecl wined3d_device_wait_idle(struct wined3d_device *device);
 
 /* Return the integer base-2 logarithm of x. Undefined for x == 0. */
 static inline unsigned int wined3d_log2i(unsigned int x)
-- 
2.30.2

From 9c84c7ec7714dc3f0f9038b60735788f9d37d77c Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 1 May 2018 15:06:30 -0500
Subject: [PATCH 06/12] wined3d: Support retrieving depth texture in GL texture
 callback

---
 dlls/d3d11/texture.c             | 20 +++++++++++++++++---
 dlls/wined3d/cs.c                | 14 ++++++++++++--
 dlls/wined3d/texture.c           |  7 ++++---
 dlls/wined3d/wined3d_private.h   |  3 ++-
 include/wine/wined3d-interop.idl |  4 ++--
 include/wine/wined3d.h           |  4 ++--
 6 files changed, 39 insertions(+), 13 deletions(-)

diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index dd21c6d7f08..c46aae99a24 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -716,14 +716,28 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(IWineD3D11Texture2D *iface
 }
 
 static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Texture2D *iface,
-        gl_texture_callback callback, const void *data, unsigned int size)
+        gl_texture_callback callback, IUnknown *depth_unk, const void *data, unsigned int size)
 {
-    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface), *depth_tex = NULL;
+    IWineD3D11Texture2D *depth_d3d11 = NULL;
 
     TRACE("iface %p, callback %p, data %p, size %u.\n", iface, callback, data, size);
 
     wined3d_mutex_lock();
-    wined3d_access_gl_texture(texture->wined3d_texture, callback, data, size);
+
+    if (depth_unk)
+    {
+        HRESULT hr;
+        hr = IUnknown_QueryInterface(depth_unk, &IID_IWineD3D11Texture2D, (void**)&depth_d3d11);
+        if(hr == S_OK)
+            depth_tex = impl_from_IWineD3D11Texture2D(depth_d3d11);
+    }
+
+    wined3d_access_gl_texture(texture->wined3d_texture, callback, depth_tex ? depth_tex->wined3d_texture : NULL, data, size);
+
+    if (depth_d3d11)
+        IWineD3D11Texture2D_Release(depth_d3d11);
+
     wined3d_mutex_unlock();
 }
 
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 0eeabdb6640..edfdeecee3c 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -464,6 +464,7 @@ struct wined3d_cs_gl_texture_callback
 {
     enum wined3d_cs_op opcode;
     struct wined3d_texture *texture;
+    struct wined3d_texture *depth_texture;
     wined3d_gl_texture_callback callback;
     unsigned int data_size;
     BYTE data[1];
@@ -2727,6 +2728,7 @@ static void wined3d_cs_exec_gl_texture_callback(struct wined3d_cs *cs, const voi
 {
     const struct wined3d_cs_gl_texture_callback *op = data;
     struct wined3d_texture_gl *texture = wined3d_texture_gl(op->texture);
+    struct wined3d_texture_gl *depth_texture = wined3d_texture_gl(op->depth_texture);
     const struct wined3d_gl_info *gl_info;
     struct wined3d_context *context;
 
@@ -2734,8 +2736,12 @@ static void wined3d_cs_exec_gl_texture_callback(struct wined3d_cs *cs, const voi
     gl_info = wined3d_context_gl(context)->gl_info;
 
     wined3d_texture_load_location(&texture->t, 0, context, WINED3D_LOCATION_TEXTURE_RGB);
+    if (depth_texture)
+        wined3d_texture_load_location(&depth_texture->t, 0, context, WINED3D_LOCATION_TEXTURE_RGB);
 
-    op->callback(texture->texture_rgb.name, op->data, op->data_size);
+    op->callback(texture->texture_rgb.name,
+            depth_texture ? depth_texture->texture_rgb.name : 0,
+            op->data, op->data_size);
 
     context_invalidate_compute_state(context, STATE_COMPUTE_SHADER_RESOURCE_BINDING);
     context_invalidate_state(context, STATE_GRAPHICS_SHADER_RESOURCE_BINDING);
@@ -2750,13 +2750,15 @@ static void wined3d_cs_exec_gl_texture_callback(struct wined3d_cs *cs, const voi
 }
 
 void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        wined3d_gl_texture_callback callback, const void *data, unsigned int size)
+        wined3d_gl_texture_callback callback, struct wined3d_texture *depth_texture,
+        const void *data, unsigned int size)
 {
     struct wined3d_cs_gl_texture_callback *op;
 
     op = cs->c.ops->require_space(cs, sizeof(*op) + size, WINED3D_CS_QUEUE_DEFAULT);
     op->opcode = WINED3D_CS_OP_GL_TEXTURE_CALLBACK;
     op->texture = texture;
+    op->depth_texture = depth_texture;
     op->callback = callback;
     op->data_size = size;
     memcpy(op->data, data, size);
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index bdcd0b55ae6..b8fa5d7d3ae 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -4575,13 +4575,14 @@ void wined3d_texture_download_from_texture(struct wined3d_texture *dst_texture,
 }
 
 void CDECL wined3d_access_gl_texture(struct wined3d_texture *texture,
-        wined3d_gl_texture_callback callback, const void *data, unsigned int size)
+        wined3d_gl_texture_callback callback, struct wined3d_texture *depth_texture,
+        const void *data, unsigned int size)
 {
     struct wined3d_device *device = texture->resource.device;
 
-    TRACE("texture %p, callback %p, data %p, size %u.\n", texture, callback, data, size);
+    TRACE("texture %p, depth_texture %p, callback %p, data %p, size %u.\n", texture, depth_texture, callback, data, size);
 
-    wined3d_cs_emit_gl_texture_callback(device->cs, texture, callback, data, size);
+    wined3d_cs_emit_gl_texture_callback(device->cs, texture, callback, depth_texture, data, size);
 }
 
 static void wined3d_texture_no3d_upload_data(struct wined3d_context *context,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 8a38f6d4925..a01ee1690c1 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4763,7 +4763,8 @@ static inline void wined3d_cs_finish(struct wined3d_cs *cs, enum wined3d_cs_queu
 }
 
 void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_texture *texture,
-        wined3d_gl_texture_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
+        wined3d_gl_texture_callback callback, struct wined3d_texture *depth_texture,
+        const void *data, unsigned int size) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
         wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_wait_idle(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
index 6f8ea3770e3..c5395ccc0ed 100644
--- a/include/wine/wined3d-interop.idl
+++ b/include/wine/wined3d-interop.idl
@@ -16,7 +16,7 @@
  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
  */
 
-typedef void (__cdecl *gl_texture_callback)(unsigned int gl_texture, const void *data, unsigned int data_size);
+typedef void (__cdecl *gl_texture_callback)(unsigned int gl_texture, unsigned int gl_depth_texture, const void *data, unsigned int data_size);
 
 import "d3d11.idl";
 
@@ -27,7 +27,7 @@ import "d3d11.idl";
 ]
 interface IWineD3D11Texture2D : ID3D11Texture2D
 {
-    void access_gl_texture(gl_texture_callback callback, const void *data, unsigned int data_size);
+    void access_gl_texture(gl_texture_callback callback, IUnknown *depth_texture, const void *data, unsigned int data_size);
 }
 
 typedef void (__cdecl *user_cs_callback)(const void *data, unsigned int data_size);
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index c90a71dbd5b..81235a7677c 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2969,10 +2969,10 @@ ULONG __cdecl wined3d_vertex_declaration_incref(struct wined3d_vertex_declaratio
 HRESULT __cdecl wined3d_extract_shader_input_signature_from_dxbc(struct wined3d_shader_signature *signature,
         const void *byte_code, SIZE_T byte_code_size);
 
-typedef void (__cdecl *wined3d_gl_texture_callback)(unsigned int gl_texture, const void *data, unsigned int size);
+typedef void (__cdecl *wined3d_gl_texture_callback)(unsigned int gl_texture, unsigned int gl_depth_texture, const void *data, unsigned int size);
 
 void __cdecl wined3d_access_gl_texture(struct wined3d_texture *texture,
-        wined3d_gl_texture_callback callback, const void *data, unsigned int size);
+        wined3d_gl_texture_callback callback, struct wined3d_texture *depth_texture, const void *data, unsigned int size);
 
 typedef void (__cdecl *wined3d_cs_callback)(const void *data, unsigned int size);
 
-- 
2.30.2

From d00f400da6cc085c207d0501944804ad63cb486b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Tue, 18 Sep 2018 23:10:14 +0200
Subject: [PATCH 07/12] wined3d: Get rid of wined3d_cs_emit_wait_idle().

---
 dlls/wined3d/cs.c              | 15 ---------------
 dlls/wined3d/device.c          |  2 +-
 dlls/wined3d/wined3d_private.h |  1 -
 3 files changed, 1 insertion(+), 17 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index edfdeecee3c..298f74c46c0 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -2804,19 +2803,6 @@ void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
     cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
 
-static void wined3d_cs_exec_wait_idle(struct wined3d_cs *cs, const void *data) {}
-
-void wined3d_cs_emit_wait_idle(struct wined3d_cs *cs)
-{
-    struct wined3d_cs_wait_idle *op;
-
-    op = cs->c.ops->require_space(cs, sizeof(*op), WINED3D_CS_QUEUE_DEFAULT);
-    op->opcode = WINED3D_CS_OP_WAIT_IDLE;
-
-    cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
-    cs->c.ops->finish(cs, WINED3D_CS_QUEUE_DEFAULT);
-}
-
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index a3e41cb38ef..9ec837e837d 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -6333,5 +6333,5 @@ void CDECL wined3d_device_wait_idle(struct wined3d_device *device)
 {
     TRACE("device %p.\n", device);
 
-    wined3d_cs_emit_wait_idle(device->cs);
+    device->cs->c.ops->finish(device->cs, WINED3D_CS_QUEUE_DEFAULT);
 }
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index a01ee1690c1..0a18d909c5e 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4767,7 +4767,6 @@ void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_t
         const void *data, unsigned int size) DECLSPEC_HIDDEN;
 void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
         wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
-void wined3d_cs_emit_wait_idle(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
 
 static inline void wined3d_device_context_push_constants(struct wined3d_device_context *context,
         enum wined3d_push_constants p, unsigned int start_idx, unsigned int count, const void *constants)
-- 
2.30.2

From 08d1dd39399a79f3f701cbcb37b733a5f48af5fa Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Tue, 18 Sep 2018 22:04:21 +0200
Subject: [PATCH 08/12] wined3d: Implement synchronous texture access.

For vrclient.
---
 dlls/d3d11/texture.c             |  15 ++++
 dlls/wined3d/cs.c                |  48 ++++++++++++
 dlls/wined3d/device.c            |   2 +
 dlls/wined3d/texture.c           | 123 +++++++++++++++++++++++++++++++
 dlls/wined3d/wined3d_private.h   |  15 ++++
 include/wine/wined3d-interop.idl |   2 +
 include/wine/wined3d.h           |   2 +
 7 files changed, 207 insertions(+)

diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index c46aae99a24..7f7e8254225 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -741,6 +741,20 @@ static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Textur
     wined3d_mutex_unlock();
 }
 
+static unsigned int STDMETHODCALLTYPE d3d11_texture2d_get_gl_texture(IWineD3D11Texture2D *iface)
+{
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
+    unsigned int id;
+
+    TRACE("iface %p.\n", iface);
+
+    wined3d_mutex_lock();
+    id = wined3d_get_gl_texture(texture->wined3d_texture);
+    wined3d_mutex_unlock();
+
+    return id;
+}
+
 static const struct IWineD3D11Texture2DVtbl d3d11_texture2d_vtbl =
 {
     /* IUnknown methods */
@@ -760,6 +774,7 @@ static const struct IWineD3D11Texture2DVtbl d3d11_texture2d_vtbl =
     d3d11_texture2d_GetDesc,
     /* IWineD3D11Texture methods */
     d3d11_texture2d_access_gl_texture,
+    d3d11_texture2d_get_gl_texture,
 };
 
 struct d3d_texture2d *unsafe_impl_from_ID3D11Texture2D(ID3D11Texture2D *iface)
diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 298f74c46c0..511883924a1 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -79,6 +79,7 @@ enum wined3d_cs_op
     WINED3D_CS_OP_EXECUTE_COMMAND_LIST,
     WINED3D_CS_OP_GL_TEXTURE_CALLBACK,
     WINED3D_CS_OP_USER_CALLBACK,
+    WINED3D_CS_OP_FENCE,
     WINED3D_CS_OP_STOP,
 };
 
@@ -482,6 +483,12 @@ struct wined3d_cs_wait_idle
     enum wined3d_cs_op opcode;
 };
 
+struct wined3d_cs_fence
+{
+    enum wined3d_cs_op opcode;
+    GLsync *fence;
+};
+
 struct wined3d_cs_stop
 {
     enum wined3d_cs_op opcode;
@@ -2803,6 +2810,46 @@ void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
     cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
 }
 
+static void wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
+{
+    const struct wined3d_cs_fence *op = data;
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_context *context;
+    GLsync fence;
+
+    context = context_acquire(cs->c.device, NULL, 0);
+    gl_info = wined3d_context_gl(context)->gl_info;
+
+    fence = GL_EXTCALL(glFenceSync(GL_SYNC_GPU_COMMANDS_COMPLETE, 0));
+    wined3d_context_gl(context)->gl_info->gl_ops.gl.p_glFlush();
+
+    *op->fence = fence;
+
+    checkGLcall("fence");
+
+    context_release(context);
+}
+
+static GLsync wined3d_cs_emit_fence(struct wined3d_cs *cs)
+{
+    struct wined3d_cs_fence *op;
+    GLsync fence;
+
+    op = cs->c.ops->require_space(cs, sizeof(*op), WINED3D_CS_QUEUE_DEFAULT);
+    op->opcode = WINED3D_CS_OP_FENCE;
+    op->fence = &fence;
+
+    cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
+    cs->c.ops->finish(cs, WINED3D_CS_QUEUE_DEFAULT);
+
+    return fence;
+}
+
+GLsync wined3d_cs_synchronize(struct wined3d_cs *cs)
+{
+    return wined3d_cs_emit_fence(cs);
+}
+
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
 {
     struct wined3d_cs_stop *op;
@@ -2918,6 +2965,7 @@ static void (* const wined3d_cs_op_handlers[])(struct wined3d_cs *cs, const void
     /* WINED3D_CS_OP_EXECUTE_COMMAND_LIST        */ wined3d_cs_exec_execute_command_list,
     /* WINED3D_CS_OP_GL_TEXTURE_CALLBACK         */ wined3d_cs_exec_gl_texture_callback,
     /* WINED3D_CS_OP_USER_CALLBACK               */ wined3d_cs_exec_user_callback,
+    /* WINED3D_CS_OP_FENCE                       */ wined3d_cs_exec_fence,
 };
 
 static void *wined3d_cs_st_require_space(struct wined3d_device_context *context,
diff --git a/dlls/wined3d/device.c b/dlls/wined3d/device.c
index 9ec837e837d..9d042f4d0e1 100644
--- a/dlls/wined3d/device.c
+++ b/dlls/wined3d/device.c
@@ -218,6 +218,8 @@ void wined3d_device_cleanup(struct wined3d_device *device)
     if (device->swapchain_count)
         wined3d_device_uninit_3d(device);
 
+    wined3d_destroy_gl_vr_context(&device->vr_context);
+
     wined3d_cs_destroy(device->cs);
 
     for (i = 0; i < ARRAY_SIZE(device->multistate_funcs); ++i)
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index b8fa5d7d3ae..25c5e57fca0 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -4585,6 +4585,129 @@ void CDECL wined3d_access_gl_texture(struct wined3d_texture *texture,
     wined3d_cs_emit_gl_texture_callback(device->cs, texture, callback, depth_texture, data, size);
 }
 
+static const struct wined3d_gl_info *wined3d_prepare_vr_gl_context(struct wined3d_device *device)
+{
+    const struct wined3d_adapter *adapter = device->adapter;
+    const struct wined3d_gl_info *gl_info = &adapter->gl_info;
+    struct wined3d_vr_gl_context *ctx = &device->vr_context;
+    PIXELFORMATDESCRIPTOR pfd;
+    int pixel_format;
+    HGLRC share_ctx;
+
+    if (ctx->gl_info)
+        return gl_info;
+
+    TRACE("Creating GL context.\n");
+
+    if (!gl_info->p_wglCreateContextAttribsARB)
+    {
+        ERR("wglCreateContextAttribsARB is not supported.\n");
+        return NULL;
+    }
+
+    if (!gl_info->supported[ARB_SYNC])
+    {
+        FIXME("ARB_sync is not supported.\n");
+        return NULL;
+    }
+
+    ctx->window = CreateWindowA(WINED3D_OPENGL_WINDOW_CLASS_NAME, "WineD3D VR window",
+            WS_OVERLAPPEDWINDOW, 10, 10, 10, 10, NULL, NULL, NULL, NULL);
+    if (!ctx->window)
+    {
+        ERR("Failed to create a window.\n");
+        return NULL;
+    }
+
+    ctx->dc = GetDC(ctx->window);
+    if (!ctx->dc)
+    {
+        ERR("Failed to get a DC.\n");
+        goto fail;
+    }
+
+    memset(&pfd, 0, sizeof(pfd));
+    pfd.nSize = sizeof(pfd);
+    pfd.nVersion = 1;
+    pfd.dwFlags = PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER | PFD_DRAW_TO_WINDOW;
+    pfd.iPixelType = PFD_TYPE_RGBA;
+    pfd.cColorBits = 32;
+    pfd.iLayerType = PFD_MAIN_PLANE;
+
+    if (!(pixel_format = ChoosePixelFormat(ctx->dc, &pfd)))
+    {
+        ERR("Failed to find a suitable pixel format.\n");
+        goto fail;
+    }
+    DescribePixelFormat(ctx->dc, pixel_format, sizeof(pfd), &pfd);
+    SetPixelFormat(ctx->dc, pixel_format, &pfd);
+
+    share_ctx = device->context_count ? wined3d_context_gl(device->contexts[0])->gl_ctx : NULL;
+    if (!(ctx->gl_ctx = context_create_wgl_attribs(gl_info, ctx->dc, share_ctx)))
+    {
+        WARN("Failed to create GL context for VR.\n");
+        goto fail;
+    }
+
+    if (!wglMakeCurrent(ctx->dc, ctx->gl_ctx))
+    {
+        ERR("Failed to make GL context current.\n");
+        goto fail;
+    }
+
+    checkGLcall("create context");
+
+    ctx->gl_info = gl_info;
+    return gl_info;
+
+fail:
+    if (ctx->gl_ctx)
+        wglDeleteContext(ctx->gl_ctx);
+    ctx->gl_ctx = NULL;
+    if (ctx->dc)
+        ReleaseDC(ctx->window, ctx->dc);
+    ctx->dc = NULL;
+    if (ctx->window)
+        DestroyWindow(ctx->window);
+    ctx->window = NULL;
+    return NULL;
+}
+
+void wined3d_destroy_gl_vr_context(struct wined3d_vr_gl_context *ctx)
+{
+    if (!ctx->gl_info)
+        return;
+
+    TRACE("Destroying GL context.\n");
+
+    wglMakeCurrent(NULL, NULL);
+    wglDeleteContext(ctx->gl_ctx);
+    ReleaseDC(ctx->window, ctx->dc);
+    DestroyWindow(ctx->window);
+}
+
+unsigned int CDECL wined3d_get_gl_texture(struct wined3d_texture *texture)
+{
+    struct wined3d_device *device = texture->resource.device;
+    const struct wined3d_gl_info *gl_info;
+    struct wined3d_texture_gl *gl_texture;
+    GLsync fence;
+
+    TRACE("texture %p.\n", texture);
+
+    if (!(gl_info = wined3d_prepare_vr_gl_context(device)))
+        return 0;
+
+    fence = wined3d_cs_synchronize(device->cs);
+    GL_EXTCALL(glWaitSync(fence, 0, GL_TIMEOUT_IGNORED));
+    GL_EXTCALL(glDeleteSync(fence));
+
+    checkGLcall("synchronize CS");
+
+    gl_texture = wined3d_texture_gl(texture);
+    return gl_texture->texture_rgb.name;
+}
+
 static void wined3d_texture_no3d_upload_data(struct wined3d_context *context,
         const struct wined3d_const_bo_address *src_bo_addr, const struct wined3d_format *src_format,
         const struct wined3d_box *src_box, unsigned int src_row_pitch, unsigned int src_slice_pitch,
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 0a18d909c5e..4bd32d95cda 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -3774,6 +3774,14 @@ struct wined3d_so_desc_entry
     struct wined3d_stream_output_element elements[1];
 };
 
+struct wined3d_vr_gl_context
+{
+    HWND window;
+    HDC dc;
+    HGLRC gl_ctx;
+    const struct wined3d_gl_info *gl_info;
+};
+
 struct wined3d_device
 {
     LONG ref;
@@ -3842,6 +3850,8 @@ struct wined3d_device
     /* Context management */
     struct wined3d_context **contexts;
     UINT context_count;
+
+    struct wined3d_vr_gl_context vr_context;

     CRITICAL_SECTION bo_map_lock;
 };
@@ -4768,6 +4778,11 @@ void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_t
 void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
         wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
 
+GLsync wined3d_cs_synchronize(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
+
+void wined3d_destroy_gl_vr_context(struct wined3d_vr_gl_context *ctx) DECLSPEC_HIDDEN;
+
+
 static inline void wined3d_device_context_push_constants(struct wined3d_device_context *context,
         enum wined3d_push_constants p, unsigned int start_idx, unsigned int count, const void *constants)
 {
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
index c5395ccc0ed..b1bda8ada76 100644
--- a/include/wine/wined3d-interop.idl
+++ b/include/wine/wined3d-interop.idl
@@ -28,6 +28,8 @@ import "d3d11.idl";
 interface IWineD3D11Texture2D : ID3D11Texture2D
 {
     void access_gl_texture(gl_texture_callback callback, IUnknown *depth_texture, const void *data, unsigned int data_size);
+
+    unsigned int get_gl_texture();
 }
 
 typedef void (__cdecl *user_cs_callback)(const void *data, unsigned int data_size);
diff --git a/include/wine/wined3d.h b/include/wine/wined3d.h
index 81235a7677c..d63c54ca593 100644
--- a/include/wine/wined3d.h
+++ b/include/wine/wined3d.h
@@ -2974,6 +2974,8 @@ typedef void (__cdecl *wined3d_gl_texture_callback)(unsigned int gl_texture, uns
 void __cdecl wined3d_access_gl_texture(struct wined3d_texture *texture,
         wined3d_gl_texture_callback callback, struct wined3d_texture *depth_texture, const void *data, unsigned int size);
 
+unsigned int __cdecl wined3d_get_gl_texture(struct wined3d_texture *texture);
+
 typedef void (__cdecl *wined3d_cs_callback)(const void *data, unsigned int size);
 
 void __cdecl wined3d_device_run_cs_callback(struct wined3d_device *device,
-- 
2.30.2

From cc1f77d00ee61e8620029c08110015543682acb8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Fri, 21 Sep 2018 12:04:07 +0200
Subject: [PATCH 09/12] wined3d: Load TEXTURE_RGB location for synchronous
 texture access.

---
 dlls/wined3d/cs.c              | 10 +++++++---
 dlls/wined3d/texture.c         |  2 +-
 dlls/wined3d/wined3d_private.h |  2 +-
 3 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/dlls/wined3d/cs.c b/dlls/wined3d/cs.c
index 511883924a1..6242651dd72 100644
--- a/dlls/wined3d/cs.c
+++ b/dlls/wined3d/cs.c
@@ -486,6 +486,7 @@ struct wined3d_cs_wait_idle
 struct wined3d_cs_fence
 {
     enum wined3d_cs_op opcode;
+    struct wined3d_texture *texture;
     GLsync *fence;
 };
 
@@ -2820,6 +2821,8 @@ static void wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
     context = context_acquire(cs->c.device, NULL, 0);
     gl_info = wined3d_context_gl(context)->gl_info;
 
+    wined3d_texture_load_location(op->texture, 0, context, WINED3D_LOCATION_TEXTURE_RGB);
+
     fence = GL_EXTCALL(glFenceSync(GL_SYNC_GPU_COMMANDS_COMPLETE, 0));
     wined3d_context_gl(context)->gl_info->gl_ops.gl.p_glFlush();
 
@@ -2830,13 +2833,14 @@ static void wined3d_cs_exec_fence(struct wined3d_cs *cs, const void *data)
     context_release(context);
 }
 
-static GLsync wined3d_cs_emit_fence(struct wined3d_cs *cs)
+static GLsync wined3d_cs_emit_fence(struct wined3d_cs *cs, struct wined3d_texture *texture)
 {
     struct wined3d_cs_fence *op;
     GLsync fence;
 
     op = cs->c.ops->require_space(cs, sizeof(*op), WINED3D_CS_QUEUE_DEFAULT);
     op->opcode = WINED3D_CS_OP_FENCE;
+    op->texture = texture;
     op->fence = &fence;
 
     cs->c.ops->submit(cs, WINED3D_CS_QUEUE_DEFAULT);
@@ -2845,9 +2849,9 @@ static GLsync wined3d_cs_emit_fence(struct wined3d_cs *cs)
     return fence;
 }
 
-GLsync wined3d_cs_synchronize(struct wined3d_cs *cs)
+GLsync wined3d_cs_synchronize(struct wined3d_cs *cs, struct wined3d_texture *texture)
 {
-    return wined3d_cs_emit_fence(cs);
+    return wined3d_cs_emit_fence(cs, texture);
 }
 
 static void wined3d_cs_emit_stop(struct wined3d_cs *cs)
diff --git a/dlls/wined3d/texture.c b/dlls/wined3d/texture.c
index 25c5e57fca0..72a64889ca9 100644
--- a/dlls/wined3d/texture.c
+++ b/dlls/wined3d/texture.c
@@ -4698,7 +4698,7 @@ unsigned int CDECL wined3d_get_gl_texture(struct wined3d_texture *texture)
     if (!(gl_info = wined3d_prepare_vr_gl_context(device)))
         return 0;
 
-    fence = wined3d_cs_synchronize(device->cs);
+    fence = wined3d_cs_synchronize(device->cs, texture);
     GL_EXTCALL(glWaitSync(fence, 0, GL_TIMEOUT_IGNORED));
     GL_EXTCALL(glDeleteSync(fence));
 
diff --git a/dlls/wined3d/wined3d_private.h b/dlls/wined3d/wined3d_private.h
index 4bd32d95cda..2a9b2c08877 100644
--- a/dlls/wined3d/wined3d_private.h
+++ b/dlls/wined3d/wined3d_private.h
@@ -4778,7 +4778,7 @@ void wined3d_cs_emit_gl_texture_callback(struct wined3d_cs *cs, struct wined3d_t
 void wined3d_cs_emit_user_callback(struct wined3d_cs *cs,
         wined3d_cs_callback callback, const void *data, unsigned int size) DECLSPEC_HIDDEN;
 
-GLsync wined3d_cs_synchronize(struct wined3d_cs *cs) DECLSPEC_HIDDEN;
+GLsync wined3d_cs_synchronize(struct wined3d_cs *cs, struct wined3d_texture *texture) DECLSPEC_HIDDEN;
 
 void wined3d_destroy_gl_vr_context(struct wined3d_vr_gl_context *ctx) DECLSPEC_HIDDEN;
 
-- 
2.30.2

From 29f4110ef25083ad84d3f441986345abf79f3eaf Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Fri, 21 Sep 2018 12:17:15 +0200
Subject: [PATCH 10/12] d3d11: Pass IWineD3D11Texture2D to access_gl_texture().

---
 dlls/d3d11/texture.c             | 21 +++++++--------------
 include/wine/wined3d-interop.idl |  3 ++-
 2 files changed, 9 insertions(+), 15 deletions(-)

diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index 7f7e8254225..32bf3c3c9cc 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -716,27 +716,20 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(IWineD3D11Texture2D *iface
 }
 
 static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Texture2D *iface,
-        gl_texture_callback callback, IUnknown *depth_unk, const void *data, unsigned int size)
+        gl_texture_callback callback, IWineD3D11Texture2D *depth_texture, const void *data, unsigned int size)
 {
     struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface), *depth_tex = NULL;
-    IWineD3D11Texture2D *depth_d3d11 = NULL;
+    struct wined3d_texture *wined3d_depth_texture = NULL;
 
-    TRACE("iface %p, callback %p, data %p, size %u.\n", iface, callback, data, size);
+    TRACE("iface %p, callback %p, depth_texture %p, data %p, size %u.\n",
+            iface, callback, depth_texture, data, size);
 
     wined3d_mutex_lock();
 
-    if (depth_unk)
-    {
-        HRESULT hr;
-        hr = IUnknown_QueryInterface(depth_unk, &IID_IWineD3D11Texture2D, (void**)&depth_d3d11);
-        if(hr == S_OK)
-            depth_tex = impl_from_IWineD3D11Texture2D(depth_d3d11);
-    }
-
-    wined3d_access_gl_texture(texture->wined3d_texture, callback, depth_tex ? depth_tex->wined3d_texture : NULL, data, size);
+    if (depth_texture)
+        wined3d_depth_texture = impl_from_IWineD3D11Texture2D(depth_texture)->wined3d_texture;
 
-    if (depth_d3d11)
-        IWineD3D11Texture2D_Release(depth_d3d11);
+    wined3d_access_gl_texture(texture->wined3d_texture, callback, wined3d_depth_texture, data, size);
 
     wined3d_mutex_unlock();
 }
diff --git a/include/wine/wined3d-interop.idl b/include/wine/wined3d-interop.idl
index b1bda8ada76..f960e2f6d9d 100644
--- a/include/wine/wined3d-interop.idl
+++ b/include/wine/wined3d-interop.idl
@@ -27,7 +27,8 @@ import "d3d11.idl";
 ]
 interface IWineD3D11Texture2D : ID3D11Texture2D
 {
-    void access_gl_texture(gl_texture_callback callback, IUnknown *depth_texture, const void *data, unsigned int data_size);
+    void access_gl_texture(gl_texture_callback callback,
+            IWineD3D11Texture2D *depth_texture, const void *data, unsigned int data_size);
 
     unsigned int get_gl_texture();
 }
-- 
2.30.2

From 9a97a24ad5001cc4d25b9b8236fbf13b76d9eaef Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?J=C3=B3zef=20Kucia?= <joseph.kucia@gmail.com>
Date: Thu, 11 Oct 2018 11:31:43 +0200
Subject: [PATCH 11/12] d3d11: Remove unused 'depth_tex' variable.

---
 dlls/d3d11/texture.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/dlls/d3d11/texture.c b/dlls/d3d11/texture.c
index 32bf3c3c9cc..f6e7d474d99 100644
--- a/dlls/d3d11/texture.c
+++ b/dlls/d3d11/texture.c
@@ -718,7 +718,7 @@ static void STDMETHODCALLTYPE d3d11_texture2d_GetDesc(IWineD3D11Texture2D *iface
 static void STDMETHODCALLTYPE d3d11_texture2d_access_gl_texture(IWineD3D11Texture2D *iface,
         gl_texture_callback callback, IWineD3D11Texture2D *depth_texture, const void *data, unsigned int size)
 {
-    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface), *depth_tex = NULL;
+    struct d3d_texture2d *texture = impl_from_IWineD3D11Texture2D(iface);
     struct wined3d_texture *wined3d_depth_texture = NULL;
 
     TRACE("iface %p, callback %p, depth_texture %p, data %p, size %u.\n",
-- 
2.30.2

From b476c31f53be82ad3b8a3ec9d7987f75e8040cfe Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Sun, 18 Aug 2019 19:05:52 -0600
Subject: [PATCH 12/12] wined3d

---
 dlls/wined3d/wined3d.spec | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/dlls/wined3d/wined3d.spec b/dlls/wined3d/wined3d.spec
index 2879e1653d3..bbc9ce7b99c 100644
--- a/dlls/wined3d/wined3d.spec
+++ b/dlls/wined3d/wined3d.spec
@@ -367,6 +367,11 @@
 @ cdecl wined3d_vertex_declaration_decref(ptr)
 @ cdecl wined3d_vertex_declaration_get_parent(ptr)
 @ cdecl wined3d_vertex_declaration_incref(ptr)
+
+@ cdecl wined3d_access_gl_texture(ptr ptr ptr long)
+@ cdecl wined3d_device_run_cs_callback(ptr ptr ptr long)
+@ cdecl wined3d_device_wait_idle(ptr)
+@ cdecl wined3d_get_gl_texture(ptr)

 @ cdecl vkd3d_create_instance(ptr ptr)
 @ cdecl vkd3d_instance_decref(ptr)
-- 
2.30.2

From 7c78c4bb595cc1ab37a7ecaf1d7be34d64f82cdf Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Sat, 11 Dec 2021 12:23:17 +0100
Subject: [PATCH] winevulkan: Add struct unwrappers for vrclient.

---
 dlls/winevulkan/loader.c         | 25 +++++++++++++++++++++++++
 dlls/winevulkan/make_vulkan      | 10 ++++++++++
 dlls/winevulkan/vulkan.c         | 31 +++++++++++++++++++++++++++++++
 dlls/winevulkan/vulkan_loader.h  |  6 ++++++
 dlls/winevulkan/vulkan_private.h |  6 ++++++
 5 files changed, 78 insertions(+)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index 3fa334d2a3e..4821b132cfe 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -405,6 +405,31 @@ static BOOL WINAPI call_vulkan_debug_utils_callback( struct wine_vk_debug_utils_
     return params->user_callback(params->severity, params->message_types, &params->data, params->user_data);
 }

+VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device)
+{
+    return unix_funcs->p_wine_get_native_VkDevice(device);
+}
+
+VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance)
+{
+    return unix_funcs->p_wine_get_native_VkInstance(instance);
+}
+
+VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev)
+{
+    return unix_funcs->p_wine_get_native_VkPhysicalDevice(phys_dev);
+}
+
+VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue)
+{
+    return unix_funcs->p_wine_get_native_VkQueue(queue);
+}
+
+VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev)
+{
+    return unix_funcs->p_wine_get_wrapped_VkPhysicalDevice(instance, native_phys_dev);
+}
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     void **kernel_callback_table;
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index e9b1b456584..7fc4412fdfd 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -2847,6 +2847,11 @@ class VkGenerator(object):
         f.write("    wine_vk_call,\n")
         f.write("    wine_vk_is_available_instance_function,\n")
         f.write("    wine_vk_is_available_device_function,\n")
+        f.write("    __wine_get_native_VkDevice,\n")
+        f.write("    __wine_get_native_VkInstance,\n")
+        f.write("    __wine_get_native_VkPhysicalDevice,\n")
+        f.write("    __wine_get_native_VkQueue,\n")
+        f.write("    __wine_get_wrapped_VkPhysicalDevice,\n")
         f.write("};\n")

     def generate_thunks_h(self, f, prefix):
@@ -3229,6 +3234,11 @@ class VkGenerator(object):
         f.write("@ stdcall -private vk_icdGetInstanceProcAddr(ptr str)\n")
         f.write("@ stdcall -private vk_icdGetPhysicalDeviceProcAddr(ptr str)\n")
         f.write("@ stdcall -private vk_icdNegotiateLoaderICDInterfaceVersion(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkDevice(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkInstance(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkPhysicalDevice(ptr)\n")
+        f.write("@ stdcall __wine_get_native_VkQueue(ptr)\n")
+        f.write("@ stdcall __wine_get_wrapped_VkPhysicalDevice(ptr ptr)\n")

         # Export symbols for all Vulkan Core functions.
         for func in self.registry.funcs.values():
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 638ca3a7a41..81c2feff36e 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -1767,3 +1767,34 @@ BOOL WINAPI wine_vk_is_available_device_function(VkDevice device, const char *na
 {
     return !!vk_funcs->p_vkGetDeviceProcAddr(device->device, name);
 }
+
+VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device)
+{
+    return device->device;
+}
+
+VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance)
+{
+    return instance->instance;
+}
+
+VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev)
+{
+    return phys_dev->phys_dev;
+}
+
+VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue)
+{
+    return queue->queue;
+}
+
+VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev)
+{
+    uint32_t i;
+    for(i = 0; i < instance->phys_dev_count; ++i){
+        if(instance->phys_devs[i]->phys_dev == native_phys_dev)
+            return instance->phys_devs[i];
+    }
+    WARN("Unknown native physical device: %p\n", native_phys_dev);
+    return NULL;
+}
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index 2efa56e0193..da3099fe042 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -108,6 +108,12 @@ struct unix_funcs
     NTSTATUS (WINAPI *p_vk_call)(enum unix_call, void *);
     BOOL (WINAPI *p_is_available_instance_function)(VkInstance, const char *);
     BOOL (WINAPI *p_is_available_device_function)(VkDevice, const char *);
+
+    VkDevice (WINAPI *p_wine_get_native_VkDevice)(VkDevice);
+    VkInstance (WINAPI *p_wine_get_native_VkInstance)(VkInstance);
+    VkPhysicalDevice (WINAPI *p_wine_get_native_VkPhysicalDevice)(VkPhysicalDevice);
+    VkQueue (WINAPI *p_wine_get_native_VkQueue)(VkQueue);
+    VkPhysicalDevice (WINAPI *p_wine_get_wrapped_VkPhysicalDevice)(VkInstance, VkPhysicalDevice);
 };

 #endif /* __WINE_VULKAN_LOADER_H */
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 83a26988e8b..971b2cb56bf 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -217,4 +217,10 @@ extern const struct unix_funcs loader_funcs;
 BOOL WINAPI wine_vk_is_available_instance_function(VkInstance instance, const char *name) DECLSPEC_HIDDEN;
 BOOL WINAPI wine_vk_is_available_device_function(VkDevice device, const char *name) DECLSPEC_HIDDEN;

+extern VkDevice WINAPI __wine_get_native_VkDevice(VkDevice device) DECLSPEC_HIDDEN;
+extern VkInstance WINAPI __wine_get_native_VkInstance(VkInstance instance) DECLSPEC_HIDDEN;
+extern VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevice phys_dev) DECLSPEC_HIDDEN;
+extern VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue) DECLSPEC_HIDDEN;
+extern VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_VULKAN_PRIVATE_H */
From 28b7ae8e2cf2fda0a41ad15d0ea0d6b85468c09e Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 18 Jun 2019 14:55:34 -0500
Subject: [PATCH] Revert "winevulkan: Check if instance extensions are
 supported."

This reverts commit e84999bd7ab859746e893ed2d49b1d42b0323c3a.

Vulkan VR games will try to load some extensions that winevulkan doesn't
support.
---
 dlls/winevulkan/vulkan.c | 8 +-------
 1 file changed, 1 insertion(+), 7 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 81c2feff36e..573e40aff89 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -506,17 +506,11 @@ static VkResult wine_vk_instance_convert_create_info(const VkInstanceCreateInfo
         return VK_ERROR_LAYER_NOT_PRESENT;
     }

-    TRACE("Enabled %u instance extensions.\n", dst->enabledExtensionCount);
+    TRACE("Enabled extensions: %u\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
     {
         const char *extension_name = dst->ppEnabledExtensionNames[i];
         TRACE("Extension %u: %s.\n", i, debugstr_a(extension_name));
-        if (!wine_vk_instance_extension_supported(extension_name))
-        {
-            WARN("Extension %s is not supported.\n", debugstr_a(extension_name));
-            free_VkInstanceCreateInfo_struct_chain(dst);
-            return VK_ERROR_EXTENSION_NOT_PRESENT;
-        }
         if (!strcmp(extension_name, "VK_EXT_debug_utils") || !strcmp(extension_name, "VK_EXT_debug_report"))
         {
             object->enable_wrapper_list = VK_TRUE;
From e10162d664a82e6989a0e444807e9a1d84d86303 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Tue, 25 Sep 2018 14:53:05 -0500
Subject: [PATCH] Revert "winevulkan: Check if device extensions are
 supported."

This reverts commit 4907ffdf2a15ab3a1e3749def37f4be67b758a35.

Vulkan VR games will try to load some extensions that winevulkan doesn't
support.
---
 dlls/winevulkan/vulkan.c | 11 ++---------
 1 file changed, 2 insertions(+), 9 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 573e40aff89..830fe7d9466 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -386,17 +386,10 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;

-    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+    TRACE("Enabled extensions: %u.\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
     {
-        const char *extension_name = dst->ppEnabledExtensionNames[i];
-        TRACE("Extension %u: %s.\n", i, debugstr_a(extension_name));
-        if (!wine_vk_device_extension_supported(extension_name))
-        {
-            WARN("Extension %s is not supported.\n", debugstr_a(extension_name));
-            wine_vk_device_free_create_info(dst);
-            return VK_ERROR_EXTENSION_NOT_PRESENT;
-        }
+        TRACE("Extension %u: %s.\n", i, debugstr_a(dst->ppEnabledExtensionNames[i]));
     }

     return VK_SUCCESS;
From 7e67d9e6792b2e4d97128ceb5d4ff2fdb581b37b Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Sun, 10 Oct 2021 21:52:26 +0200
Subject: [PATCH] winevulkan: Retrieve XR extensions from the environment

---
 dlls/winevulkan/vulkan.c | 124 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 120 insertions(+), 4 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 830fe7d9466..5ca62ff9350 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -368,12 +368,70 @@ static void wine_vk_device_free_create_info(VkDeviceCreateInfo *create_info)
     free_VkDeviceCreateInfo_struct_chain(create_info);
 }

+static char **parse_xr_extensions(unsigned int *len)
+{
+    char *xr_str, *iter, *start, **list;
+    unsigned int extension_count = 0, o = 0;
+
+    xr_str = getenv("__WINE_OPENXR_VK_DEVICE_EXTENSIONS");
+    if (!xr_str)
+    {
+        *len = 0;
+        return NULL;
+    }
+    xr_str = strdup(xr_str);
+
+    TRACE("got var: %s\n", xr_str);
+
+    iter = xr_str;
+    while(*iter){
+        if(*iter++ == ' ')
+            extension_count++;
+    }
+    /* count the one ending in NUL */
+    if(iter != xr_str)
+        extension_count++;
+    if(!extension_count){
+        *len = 0;
+        return NULL;
+    }
+
+    TRACE("counted %u extensions\n", extension_count);
+
+    list = malloc(extension_count * sizeof(char *));
+
+    start = iter = xr_str;
+    do{
+        if(*iter == ' '){
+            *iter = 0;
+            list[o++] = strdup(start);
+            TRACE("added %s to list\n", list[o-1]);
+            iter++;
+            start = iter;
+        }else if(*iter == 0){
+            list[o++] = strdup(start);
+            TRACE("added %s to list\n", list[o-1]);
+            break;
+        }else{
+            iter++;
+        }
+    }while(1);
+
+    free(xr_str);
+
+    *len = extension_count;
+
+    return list;
+}
+
 static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src,
-        VkDeviceCreateInfo *dst)
+        VkDeviceCreateInfo *dst, BOOL *must_free_extensions)
 {
-    unsigned int i;
+    unsigned int i, append_xr = 0, wine_extension_count;
     VkResult res;

+    static const char *wine_xr_extension_name = "VK_WINE_openxr_device_extensions";
+
     *dst = *src;

     if ((res = convert_VkDeviceCreateInfo_struct_chain(src->pNext, dst)) < 0)
@@ -386,8 +444,54 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;

-    TRACE("Enabled extensions: %u.\n", dst->enabledExtensionCount);
     for (i = 0; i < dst->enabledExtensionCount; i++)
+    {
+        const char *extension_name = dst->ppEnabledExtensionNames[i];
+        if (!strcmp(extension_name, wine_xr_extension_name))
+        {
+            append_xr = 1;
+            break;
+        }
+    }
+
+    if (append_xr)
+    {
+        unsigned int xr_extensions_len, o = 0;
+        char **xr_extensions_list = parse_xr_extensions(&xr_extensions_len);
+
+        char **new_extensions_list = malloc(sizeof(char *) * (dst->enabledExtensionCount + xr_extensions_len));
+
+        if(!xr_extensions_list)
+            WARN("Requested to use XR extensions, but none are set!\n");
+
+        for (i = 0; i < dst->enabledExtensionCount; i++)
+        {
+            if (strcmp(dst->ppEnabledExtensionNames[i], wine_xr_extension_name) != 0)
+            {
+                new_extensions_list[o++] = strdup(dst->ppEnabledExtensionNames[i]);
+            }
+        }
+
+        TRACE("appending XR extensions:\n");
+        for (i = 0; i < xr_extensions_len; ++i)
+        {
+            TRACE("\t%s\n", xr_extensions_list[i]);
+            new_extensions_list[o++] = xr_extensions_list[i];
+        }
+        dst->enabledExtensionCount = o;
+        dst->ppEnabledExtensionNames = (const char * const *)new_extensions_list;
+
+        free(xr_extensions_list);
+
+        *must_free_extensions = TRUE;
+        wine_extension_count = dst->enabledExtensionCount - xr_extensions_len;
+    }else{
+        *must_free_extensions = FALSE;
+        wine_extension_count = dst->enabledExtensionCount;
+    }
+
+    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+    for (i = 0; i < wine_extension_count; i++)
     {
         TRACE("Extension %u: %s.\n", i, debugstr_a(dst->ppEnabledExtensionNames[i]));
     }
@@ -395,6 +499,15 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     return VK_SUCCESS;
 }

+static void wine_vk_device_free_create_info_extensions(VkDeviceCreateInfo *create_info)
+{
+    unsigned int i;
+    for(i = 0; i < create_info->enabledExtensionCount; ++i)
+        free((void*)create_info->ppEnabledExtensionNames[i]);
+    free((void*)create_info->ppEnabledExtensionNames);
+}
+
+
 /* Helper function used for freeing a device structure. This function supports full
  * and partial object cleanups and can thus be used for vkCreateDevice failures.
  */
@@ -684,6 +797,7 @@ NTSTATUS wine_vkCreateDevice(void *args)
     struct VkQueue_T *next_queue;
     struct VkDevice_T *object;
     unsigned int i;
+    BOOL create_info_free_extensions;
     VkResult res;

     TRACE("%p, %p, %p, %p\n", phys_dev, create_info, allocator, device);
@@ -708,13 +822,15 @@ NTSTATUS wine_vkCreateDevice(void *args)
     object->base.base.loader_magic = VULKAN_ICD_MAGIC_VALUE;
     object->phys_dev = phys_dev;

-    res = wine_vk_device_convert_create_info(create_info, &create_info_host);
+    res = wine_vk_device_convert_create_info(create_info, &create_info_host, &create_info_free_extensions);
     if (res != VK_SUCCESS)
         goto fail;

     res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
             &create_info_host, NULL /* allocator */, &object->device);
     wine_vk_device_free_create_info(&create_info_host);
+    if(create_info_free_extensions)
+        wine_vk_device_free_create_info_extensions(&create_info_host);
     WINE_VK_ADD_DISPATCHABLE_MAPPING(phys_dev->instance, object, object->device);
     if (res != VK_SUCCESS)
     {
From 116711bfb34fb080381f1111f9c8ecf1fc33334a Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Sat, 11 Dec 2021 12:27:42 +0100
Subject: [PATCH] winevulkan: Add functions for creating VK instance and device
 through OpenXR.

---
 dlls/winevulkan/loader.c         | 20 ++++++++++++++++
 dlls/winevulkan/make_vulkan      | 10 ++++++++
 dlls/winevulkan/vulkan.c         | 39 +++++++++++++++++++++++++++++---
 dlls/winevulkan/vulkan_loader.h  | 10 ++++++++
 dlls/winevulkan/vulkan_private.h |  5 ++++
 dlls/winex11.drv/vulkan.c        | 22 ++++++++++++++----
 6 files changed, 99 insertions(+), 7 deletions(-)

diff --git a/dlls/winevulkan/loader.c b/dlls/winevulkan/loader.c
index 4821b132cfe..0b2c4241f75 100644
--- a/dlls/winevulkan/loader.c
+++ b/dlls/winevulkan/loader.c
@@ -430,6 +430,26 @@ VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance,
     return unix_funcs->p_wine_get_wrapped_VkPhysicalDevice(instance, native_phys_dev);
 }

+VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
+{
+    return unix_funcs->p_wine_create_vk_instance_with_callback(create_info, allocator, instance,
+            native_vkCreateInstance, native_vkCreateInstance_context);
+}
+
+VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev,
+        const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device,
+        VkResult (WINAPI *native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *,
+        VkDevice *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateDevice_context)
+{
+    return unix_funcs->p_wine_create_vk_device_with_callback(phys_dev, create_info, allocator, device,
+            native_vkCreateDevice, native_vkCreateDevice_context);
+}
+
+
 BOOL WINAPI DllMain(HINSTANCE hinst, DWORD reason, void *reserved)
 {
     void **kernel_callback_table;
diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 7fc4412fdfd..e198256b31c 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -2852,6 +2852,8 @@ class VkGenerator(object):
         f.write("    __wine_get_native_VkPhysicalDevice,\n")
         f.write("    __wine_get_native_VkQueue,\n")
         f.write("    __wine_get_wrapped_VkPhysicalDevice,\n")
+        f.write("    __wine_create_vk_instance_with_callback,\n")
+        f.write("    __wine_create_vk_device_with_callback,\n")
         f.write("};\n")

     def generate_thunks_h(self, f, prefix):
@@ -3208,6 +3208,12 @@ class VkGenerator(object):
         f.write("     * will contain the area to blit the user image to in real coordinates.\n")
         f.write("     * All parameters are optional. */\n")
         f.write("    VkBool32 (*query_fs_hack)(VkSurfaceKHR surface, VkExtent2D *real_sz, VkExtent2D *user_sz, VkRect2D *dst_blit, VkFilter *filter);\n")
+
+        f.write("    VkResult (*create_vk_instance_with_callback)(const VkInstanceCreateInfo *create_info,\n")
+        f.write("            const VkAllocationCallbacks *allocator, VkInstance *instance,\n")
+        f.write("            VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,\n")
+        f.write("            VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context);\n")
+
         f.write("};\n\n")

         f.write("extern const struct vulkan_funcs * CDECL __wine_get_vulkan_driver(UINT version);\n\n")
@@ -3239,6 +3247,8 @@ class VkGenerator(object):
         f.write("@ stdcall __wine_get_native_VkPhysicalDevice(ptr)\n")
         f.write("@ stdcall __wine_get_native_VkQueue(ptr)\n")
         f.write("@ stdcall __wine_get_wrapped_VkPhysicalDevice(ptr ptr)\n")
+        f.write("@ stdcall __wine_create_vk_instance_with_callback(ptr ptr ptr ptr ptr)\n")
+        f.write("@ stdcall __wine_create_vk_device_with_callback(ptr ptr ptr ptr ptr ptr)\n")

         # Export symbols for all Vulkan Core functions.
         for func in self.registry.funcs.values():
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index 5ca62ff9350..9f12660a407 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -793,6 +793,15 @@ NTSTATUS wine_vkCreateDevice(void *args)
     const VkDeviceCreateInfo *create_info = params->pCreateInfo;
     const VkAllocationCallbacks *allocator = params->pAllocator;
     VkDevice *device = params->pDevice;
+    return __wine_create_vk_device_with_callback(phys_dev, create_info, allocator, device, NULL, NULL);
+}
+
+VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev,
+        const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device,
+        VkResult (WINAPI *native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *,
+        VkDevice *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateDevice_context)
+{
     VkDeviceCreateInfo create_info_host;
     struct VkQueue_T *next_queue;
     struct VkDevice_T *object;
@@ -826,8 +835,14 @@ NTSTATUS wine_vkCreateDevice(void *args)
     if (res != VK_SUCCESS)
         goto fail;

-    res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
-            &create_info_host, NULL /* allocator */, &object->device);
+    if (native_vkCreateDevice)
+        res = native_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device,
+                vk_funcs->p_vkGetInstanceProcAddr, native_vkCreateDevice_context);
+    else
+        res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device);
+
     wine_vk_device_free_create_info(&create_info_host);
     if(create_info_free_extensions)
         wine_vk_device_free_create_info_extensions(&create_info_host);
@@ -909,11 +909,22 @@ NTSTATUS wine_vkCreateInstance(void *args)
     const VkInstanceCreateInfo *create_info = params->pCreateInfo;
     const VkAllocationCallbacks *allocator = params->pAllocator;
     VkInstance *instance = params->pInstance;
+    return __wine_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
+VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
+{
     VkInstanceCreateInfo create_info_host;
     const VkApplicationInfo *app_info;
     struct VkInstance_T *object;
     VkResult res;

+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);
+
     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");

@@ -917,7 +943,14 @@ NTSTATUS wine_vkCreateInstance(void *args)
         return res;
     }

-    res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
+    if (native_vkCreateInstance && !vk_funcs->create_vk_instance_with_callback)
+        ERR("Driver create_vk_instance_with_callback is not available.\n");
+
+    if (native_vkCreateInstance && vk_funcs->create_vk_instance_with_callback)
+        res = vk_funcs->create_vk_instance_with_callback(&create_info_host, NULL /* allocator */, &object->instance,
+                native_vkCreateInstance, native_vkCreateInstance_context);
+    else
+        res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
     free_VkInstanceCreateInfo_struct_chain(&create_info_host);
     if (res != VK_SUCCESS)
     {
diff --git a/dlls/winevulkan/vulkan_loader.h b/dlls/winevulkan/vulkan_loader.h
index da3099fe042..05913756fbc 100644
--- a/dlls/winevulkan/vulkan_loader.h
+++ b/dlls/winevulkan/vulkan_loader.h
@@ -103,6 +103,11 @@ static inline NTSTATUS vk_unix_call(enum unix_call code, void *params)
     return __wine_unix_call(unix_handle, code, params);
 }

+typedef VkResult (WINAPI *PFN_native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *,
+                                                       void * (*)(VkInstance, const char *), void *);
+typedef VkResult (WINAPI *PFN_native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *,
+                                                     void * (*)(VkInstance, const char *), void *);
+
 struct unix_funcs
 {
     NTSTATUS (WINAPI *p_vk_call)(enum unix_call, void *);
@@ -114,6 +119,11 @@ struct unix_funcs
     VkPhysicalDevice (WINAPI *p_wine_get_native_VkPhysicalDevice)(VkPhysicalDevice);
     VkQueue (WINAPI *p_wine_get_native_VkQueue)(VkQueue);
     VkPhysicalDevice (WINAPI *p_wine_get_wrapped_VkPhysicalDevice)(VkInstance, VkPhysicalDevice);
+
+    VkResult (WINAPI *p_wine_create_vk_instance_with_callback)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *, VkInstance *,
+                                                               PFN_native_vkCreateInstance, void *);
+    VkResult (WINAPI *p_wine_create_vk_device_with_callback)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *, VkDevice *,
+                                                             PFN_native_vkCreateDevice, void *);
 };

 #endif /* __WINE_VULKAN_LOADER_H */
diff --git a/dlls/winevulkan/vulkan_private.h b/dlls/winevulkan/vulkan_private.h
index 971b2cb56bf..666ef95e1b1 100644
--- a/dlls/winevulkan/vulkan_private.h
+++ b/dlls/winevulkan/vulkan_private.h
@@ -223,4 +223,9 @@ extern VkPhysicalDevice WINAPI __wine_get_native_VkPhysicalDevice(VkPhysicalDevi
 extern VkQueue WINAPI __wine_get_native_VkQueue(VkQueue queue) DECLSPEC_HIDDEN;
 extern VkPhysicalDevice WINAPI __wine_get_wrapped_VkPhysicalDevice(VkInstance instance, VkPhysicalDevice native_phys_dev) DECLSPEC_HIDDEN;

+extern VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info, const VkAllocationCallbacks *allocator,
+        VkInstance *instance, PFN_native_vkCreateInstance callback, void *context) DECLSPEC_HIDDEN;
+extern VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev, const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device, PFN_native_vkCreateDevice callback, void *context) DECLSPEC_HIDDEN;
+
 #endif /* __WINE_VULKAN_PRIVATE_H */
diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 619b0ecec1e..d805b3c8be4 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -257,12 +257,15 @@ void vulkan_thread_detach(void)
     LeaveCriticalSection(&context_section);
 }

-static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
-        const VkAllocationCallbacks *allocator, VkInstance *instance)
+static VkResult X11DRV_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
 {
     VkInstanceCreateInfo create_info_host;
     VkResult res;
-    TRACE("create_info %p, allocator %p, instance %p\n", create_info, allocator, instance);
+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);

     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");
@@ -278,12 +281,22 @@ static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
         return res;
     }

-    res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);
+    if (native_vkCreateInstance)
+        res = native_vkCreateInstance(&create_info_host, NULL /* allocator */, instance,
+                pvkGetInstanceProcAddr, native_vkCreateInstance_context);
+    else
+        res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);

     heap_free((void *)create_info_host.ppEnabledExtensionNames);
     return res;
 }

+static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance)
+{
+    return X11DRV_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
 static VkResult X11DRV_vkCreateSwapchainKHR(VkDevice device,
         const VkSwapchainCreateInfoKHR *create_info,
         const VkAllocationCallbacks *allocator, VkSwapchainKHR *swapchain)
@@ -964,6 +964,7 @@ static const struct vulkan_funcs vulkan_funcs =

     X11DRV_wine_get_native_surface,
     X11DRV_query_fs_hack,
+    X11DRV_create_vk_instance_with_callback,
 };

 static void *X11DRV_get_vk_device_proc_addr(const char *name)
From d6b1bc3622340688a99837e413368f2f0ce6bc58 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 4 Jan 2021 14:25:06 -0600
Subject: [PATCH] wine.inf: Add OpenXR registry entries

---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 1a6af65a834..c0d600a00e3 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -6140,6 +6140,9 @@ HKCU,Software\Wine\DllOverrides,"nvcuda",0x2,"disabled"
 [NVIDIANGX]
 HKLM,Software\NVIDIA Corporation\Global\NGXCore,"FullPath",,"C:\Windows\System32"

+[ProtonOverrides]
+HKLM,Software\Khronos\OpenXR\1,"ActiveRuntime",,"C:\openxr\wineopenxr64.json"
+
 [NlsFiles]
 c_037.nls
 c_10000.nls
