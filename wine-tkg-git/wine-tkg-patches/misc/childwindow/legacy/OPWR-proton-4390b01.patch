From eb0814df6547cbd72292ce889e1626ac95f10762 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Sun, 22 May 2022 12:53:05 -0500
Subject: [PATCH] winex11.drv: Get window DC each time for blitting.

Keeping it since the surface creation doesn't look right,
it may affect app's GDI operations and window may be deleted
while the surface stays valid.

CW-Bug-Id: #20680
---
 dlls/winex11.drv/vulkan.c | 14 ++++++--------
 1 file changed, 6 insertions(+), 8 deletions(-)

diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 22d50cf91d6..19b46014021 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -70,7 +70,6 @@ struct wine_vk_surface
     BOOL known_child; /* hwnd is or has a child */
     BOOL offscreen; /* drawable is offscreen */
     LONG swapchain_count; /* surface can have one active an many retired swapchains */
-    HDC hdc;
     HWND hwnd;
     DWORD hwnd_thread_id;
 };
@@ -244,10 +243,8 @@ void wine_vk_surface_destroy(struct wine_vk_surface *surface)
     XReparentWindow(gdi_display, surface->window, get_dummy_parent(), 0, 0);
     XSync(gdi_display, False);

-    if (surface->hdc) NtUserReleaseDC(surface->hwnd, surface->hdc);
     surface->hwnd_thread_id = 0;
     surface->hwnd = 0;
-    surface->hdc = 0;
     wine_vk_surface_release(surface);
 }

@@ -413,10 +410,7 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,

     pthread_mutex_lock(&vulkan_mutex);
     if (!XFindContext(gdi_display, (XID)swapchain, vulkan_swapchain_context, (char **)&surface))
-    {
         wine_vk_surface_grab(surface);
-        hdc = surface->hdc;
-    }
     pthread_mutex_unlock(&vulkan_mutex);

     if (!surface || !surface->offscreen)
@@ -436,7 +430,11 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
     }

     result = pvkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, image_index);
-    if ((result == VK_SUCCESS || result == VK_SUBOPTIMAL_KHR) && hdc && surface && surface->offscreen)
+
+    if ((result == VK_SUCCESS || result == VK_SUBOPTIMAL_KHR) && surface && surface->offscreen)
+        hdc = NtUserGetDCEx(surface->hwnd, 0, DCX_USESTYLE | DCX_CACHE);
+
+    if (hdc)
     {
         if (wait_fence) pvkWaitForFences(device, 1, &fence, 0, timeout);
         escape.code = X11DRV_PRESENT_DRAWABLE;
@@ -445,6 +443,7 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
         NtGdiExtEscape(hdc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (char *)&escape, 0, NULL);
         if (surface->present_mode == VK_PRESENT_MODE_MAILBOX_KHR)
             if (once++) FIXME("Application requires child window rendering with mailbox present mode, expect possible tearing!\n");
+        NtUserReleaseDC(surface->hwnd, hdc);
     }

     if (fence != orig_fence) pvkDestroyFence(device, fence, NULL);
@@ -532,7 +531,6 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
     x11_surface->swapchain_count = 0;
     if (x11_surface->hwnd)
     {
-        x11_surface->hdc = NtUserGetDCEx(x11_surface->hwnd, 0, DCX_USESTYLE);
         x11_surface->window = create_client_window(create_info->hwnd, &default_visual);
         x11_surface->hwnd_thread_id = NtUserGetWindowThread(x11_surface->hwnd, NULL);
     }
From 191b54b79d1a31c69e7d425f94c4da519f583775 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 20 May 2022 18:45:15 -0500
Subject: [PATCH] winex11.drv: HACK: Add an option to support GDI blits from
 unmapped Vulkan windows.

And enable it for Disgaea 5 Complete.

CW-Bug-Id: #19945
---
 dlls/winex11.drv/vulkan.c      | 90 +++++++++++++++++++++++++++++-----
 dlls/winex11.drv/window.c      |  7 +++
 dlls/winex11.drv/x11drv.h      |  3 +
 dlls/winex11.drv/x11drv_main.c |  8 +++
 4 files changed, 96 insertions(+), 12 deletions(-)

diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 19b46014021..423a89c0298 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -72,6 +72,7 @@ struct wine_vk_surface
     LONG swapchain_count; /* surface can have one active an many retired swapchains */
     HWND hwnd;
     DWORD hwnd_thread_id;
+    BOOL gdi_blit_source; /* HACK: gdi blits from the window should work with Vulkan rendered contents. */
 };

 typedef struct VkXlibSurfaceCreateInfoKHR
@@ -315,7 +316,7 @@ void sync_vk_surface(HWND hwnd, BOOL known_child)
     {
         if (surface->hwnd != hwnd) continue;
         if (surface_with_swapchain_count > 1) wine_vk_surface_set_offscreen(surface, TRUE);
-        else wine_vk_surface_set_offscreen(surface, known_child);
+        else wine_vk_surface_set_offscreen(surface, known_child || surface->gdi_blit_source);
     }
     pthread_mutex_unlock(&vulkan_mutex);
 }
@@ -330,7 +331,7 @@ Window wine_vk_active_surface(HWND hwnd)
     LIST_FOR_EACH_ENTRY(surface, &surface_list, struct wine_vk_surface, entry)
     {
         if (surface->hwnd != hwnd) continue;
-        if (!surface->swapchain_count) continue;
+        if (!surface->swapchain_count || surface->gdi_blit_source) continue;
         active = surface;
         surface_with_swapchain_count++;
     }
@@ -347,6 +348,25 @@ Window wine_vk_active_surface(HWND hwnd)
     return window;
 }

+BOOL wine_vk_direct_window_draw( HWND hwnd )
+{
+    struct wine_vk_surface *surface;
+    BOOL ret = FALSE;
+
+    pthread_mutex_lock(&vulkan_mutex);
+    LIST_FOR_EACH_ENTRY(surface, &surface_list, struct wine_vk_surface, entry)
+    {
+        if (surface->hwnd != hwnd) continue;
+        if (surface->gdi_blit_source)
+        {
+            ret = TRUE;
+            break;
+        }
+    }
+    pthread_mutex_unlock(&vulkan_mutex);
+    return ret;
+}
+
 void vulkan_thread_detach(void)
 {
     struct wine_vk_surface *surface, *next;
@@ -396,6 +416,17 @@ static VkResult X11DRV_create_vk_instance_with_callback(const VkInstanceCreateIn
     return res;
 }

+static void set_dc_drawable( HDC hdc, Drawable drawable, const RECT *rect )
+{
+    struct x11drv_escape_set_drawable escape;
+
+    escape.code = X11DRV_SET_DRAWABLE;
+    escape.mode = IncludeInferiors;
+    escape.drawable = drawable;
+    escape.dc_rect = *rect;
+    NtGdiExtEscape( hdc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (LPSTR)&escape, 0, NULL );
+}
+
 static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
         VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore,
         VkFence fence, uint32_t *image_index)
@@ -403,10 +434,12 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
     static int once;
     struct x11drv_escape_present_drawable escape;
     struct wine_vk_surface *surface = NULL;
+    DWORD dc_flags = DCX_USESTYLE;
     VkResult result;
     VkFence orig_fence;
     BOOL wait_fence = FALSE;
     HDC hdc = 0;
+    RECT rect;

     pthread_mutex_lock(&vulkan_mutex);
     if (!XFindContext(gdi_display, (XID)swapchain, vulkan_swapchain_context, (char **)&surface))
@@ -432,17 +465,29 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
     result = pvkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, image_index);

     if ((result == VK_SUCCESS || result == VK_SUBOPTIMAL_KHR) && surface && surface->offscreen)
-        hdc = NtUserGetDCEx(surface->hwnd, 0, DCX_USESTYLE | DCX_CACHE);
+    {
+        if (!surface->gdi_blit_source)
+            dc_flags |= DCX_CACHE;
+        hdc = NtUserGetDCEx(surface->hwnd, 0, dc_flags);
+    }

     if (hdc)
     {
         if (wait_fence) pvkWaitForFences(device, 1, &fence, 0, timeout);
-        escape.code = X11DRV_PRESENT_DRAWABLE;
-        escape.drawable = surface->window;
-        escape.flush = TRUE;
-        NtGdiExtEscape(hdc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (char *)&escape, 0, NULL);
-        if (wait_fence && surface->present_mode == VK_PRESENT_MODE_MAILBOX_KHR)
-            if (once++) FIXME("Application requires child window rendering with mailbox present mode, expect possible tearing!\n");
+        if (surface->gdi_blit_source)
+        {
+            NtUserGetClientRect( surface->hwnd, &rect );
+            set_dc_drawable( hdc, surface->window, &rect );
+        }
+        else
+        {
+            escape.code = X11DRV_PRESENT_DRAWABLE;
+            escape.drawable = surface->window;
+            escape.flush = TRUE;
+            NtGdiExtEscape(hdc, NULL, 0, X11DRV_ESCAPE, sizeof(escape), (char *)&escape, 0, NULL);
+            if (wait_fence && surface->present_mode == VK_PRESENT_MODE_MAILBOX_KHR)
+                if (once++) FIXME("Application requires child window rendering with mailbox present mode, expect possible tearing!\n");
+        }
         NtUserReleaseDC(surface->hwnd, hdc);
     }

@@ -548,10 +593,24 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
         goto err;
     }

-    if (create_info->hwnd && (NtUserGetWindowRelative(create_info->hwnd, GW_CHILD) ||
-                              NtUserGetAncestor(create_info->hwnd, GA_PARENT) != NtUserGetDesktopWindow()))
+    if (vulkan_gdi_blit_source_hack)
+    {
+        RECT rect;
+
+        NtUserGetWindowRect( create_info->hwnd, &rect );
+        if (!is_window_rect_mapped( &rect ))
+        {
+            FIXME("HACK: setting gdi_blit_source for hwnd %p, surface %p.\n", x11_surface->hwnd, x11_surface);
+            x11_surface->gdi_blit_source = TRUE;
+            XReparentWindow( gdi_display, x11_surface->window, get_dummy_parent(), 0, 0 );
+        }
+    }
+
+    x11_surface->known_child = create_info->hwnd && (NtUserGetWindowRelative( create_info->hwnd, GW_CHILD )
+                               || NtUserGetAncestor( create_info->hwnd, GA_PARENT ) != NtUserGetDesktopWindow());
+
+    if (x11_surface->known_child || x11_surface->gdi_blit_source)
     {
-        x11_surface->known_child = TRUE;
         TRACE("hwnd %p creating offscreen child window surface\n", x11_surface->hwnd);
         if (!wine_vk_surface_set_offscreen(x11_surface, TRUE))
         {
@@ -578,6 +638,13 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,

     *surface = (uintptr_t)x11_surface;

+    if (x11_surface->gdi_blit_source)
+    {
+        /* Make sure window gets surface destroyed. */
+        NtUserSetWindowPos( x11_surface->hwnd, 0, 0, 0, 0, 0,
+                            SWP_NOACTIVATE | SWP_NOZORDER | SWP_NOSIZE | SWP_NOMOVE |
+                            SWP_NOREDRAW | SWP_DEFERERASE | SWP_NOSENDCHANGING | SWP_STATECHANGED );
+    }
     TRACE("Created surface=0x%s\n", wine_dbgstr_longlong(*surface));
     return VK_SUCCESS;

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 8fc05079d76..8b115ba3faf 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -2788,6 +2788,13 @@ BOOL CDECL X11DRV_WindowPosChanging( HWND hwnd, HWND insert_after, UINT swp_flag
     if (!data->whole_window && !data->embedded) goto done;
     if (swp_flags & SWP_HIDEWINDOW) goto done;
     if (data->use_alpha) goto done;
+
+    if (wine_vk_direct_window_draw( hwnd ))
+    {
+        if (*surface) window_surface_release( *surface );
+        *surface = NULL;
+        goto done;
+    }
     if (!get_surface_rect( visible_rect, &surface_rect )) goto done;

     if (*surface) window_surface_release( *surface );
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index e969c3a408a..77adec8423e 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -664,6 +664,7 @@ extern void destroy_vk_surface( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void sync_vk_surface( HWND hwnd, BOOL known_child ) DECLSPEC_HIDDEN;
 extern void resize_vk_surfaces( HWND hwnd, Window active, int mask, XWindowChanges *changes ) DECLSPEC_HIDDEN;
 extern Window wine_vk_active_surface( HWND hwnd ) DECLSPEC_HIDDEN;
+extern BOOL wine_vk_direct_window_draw( HWND hwnd ) DECLSPEC_HIDDEN;
 extern void vulkan_thread_detach(void) DECLSPEC_HIDDEN;

 extern void wait_for_withdrawn_state( HWND hwnd, BOOL set ) DECLSPEC_HIDDEN;
@@ -904,4 +905,6 @@ static inline BOOL is_window_rect_mapped( const RECT *rect )
     return (p - dst) * sizeof(WCHAR);
 }

+extern BOOL vulkan_gdi_blit_source_hack;
+
 #endif  /* __WINE_X11DRV_H */
diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index f5aaeab0df3..a57bbfd67fc 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -92,6 +92,7 @@ char *process_name = NULL;
 int xfixes_event_base = 0;
 char *process_name = NULL;
 WNDPROC client_foreign_window_proc = NULL;
+BOOL vulkan_gdi_blit_source_hack = FALSE;

 static x11drv_error_callback err_callback;   /* current callback for error */
 static Display *err_callback_display;        /* display callback is set for */
@@ -732,6 +733,16 @@ static NTSTATUS x11drv_init( void *arg )
     X11DRV_InitKeyboard( gdi_display );
     X11DRV_InitMouse( gdi_display );
     if (use_xim) use_xim = X11DRV_InitXIM( input_style );
+
+    {
+        const char *sgi = getenv("SteamGameId");
+        const char *e = getenv("WINE_VK_GDI_BLIT_SOURCE_HACK");
+        vulkan_gdi_blit_source_hack =
+            (sgi && (
+                !strcmp(sgi, "803600") /* Disgaea 5 Complete     */
+            )) ||
+            (e && *e != '\0' && *e != '0');
+    }

     init_user_driver();
     X11DRV_DisplayDevices_Init(FALSE);
From 787920ce256f4df6a202ce47fa193ab040984ec6 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Sat, 21 May 2022 20:01:08 -0500
Subject: [PATCH] winex11.drv: Implement other process window Vulkan rendering.

CW-Bug-Id: #20680
---
 dlls/winex11.drv/vulkan.c | 89 +++++++++++++++++++++++++++++++++++----
 1 file changed, 79 insertions(+), 10 deletions(-)

diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 423a89c0298..090e7091335 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -73,6 +73,10 @@ struct wine_vk_surface
     HWND hwnd;
     DWORD hwnd_thread_id;
     BOOL gdi_blit_source; /* HACK: gdi blits from the window should work with Vulkan rendered contents. */
+    BOOL other_process;
+    Colormap client_colormap;
+    HDC draw_dc;
+    unsigned int width, height;
 };

 typedef struct VkXlibSurfaceCreateInfoKHR
@@ -232,8 +236,12 @@ static void wine_vk_surface_release(struct wine_vk_surface *surface)
         pthread_mutex_unlock(&vulkan_mutex);
     }

+    if (surface->draw_dc)
+        NtGdiDeleteObjectApp(surface->draw_dc);
     if (surface->window)
         XDestroyWindow(gdi_display, surface->window);
+    if (surface->client_colormap)
+        XFreeColormap( gdi_display, surface->client_colormap );

     free(surface);
 }
@@ -357,7 +365,7 @@ BOOL wine_vk_direct_window_draw( HWND hwnd )
     LIST_FOR_EACH_ENTRY(surface, &surface_list, struct wine_vk_surface, entry)
     {
         if (surface->hwnd != hwnd) continue;
-        if (surface->gdi_blit_source)
+        if (surface->gdi_blit_source && !surface->other_process)
         {
             ret = TRUE;
             break;
@@ -448,7 +456,7 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,

     if (!surface || !surface->offscreen)
         wait_fence = FALSE;
-    else if (surface->present_mode == VK_PRESENT_MODE_MAILBOX_KHR ||
+    else if (surface->other_process || surface->present_mode == VK_PRESENT_MODE_MAILBOX_KHR ||
              surface->present_mode == VK_PRESENT_MODE_FIFO_KHR)
         wait_fence = TRUE;

@@ -466,7 +474,7 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,

     if ((result == VK_SUCCESS || result == VK_SUBOPTIMAL_KHR) && surface && surface->offscreen)
     {
-        if (!surface->gdi_blit_source)
+        if (!surface->gdi_blit_source || surface->other_process)
             dc_flags |= DCX_CACHE;
         hdc = NtUserGetDCEx(surface->hwnd, 0, dc_flags);
     }
@@ -476,8 +484,30 @@ static VkResult X11DRV_vkAcquireNextImageKHR(VkDevice device,
         if (wait_fence) pvkWaitForFences(device, 1, &fence, 0, timeout);
         if (surface->gdi_blit_source)
         {
+            unsigned int width, height;
+
             NtUserGetClientRect( surface->hwnd, &rect );
-            set_dc_drawable( hdc, surface->window, &rect );
+            if (surface->other_process)
+            {
+                width = max( rect.right - rect.left, 1 );
+                height = max( rect.bottom - rect.top, 1 );
+                if (!NtGdiStretchBlt(hdc, rect.left, rect.top, width,
+                        height, surface->draw_dc, 0, 0,
+                        width, height, SRCCOPY, 0))
+                    ERR("NtGdiStretchBlt failed.\n");
+                if (width != surface->width || height != surface->height)
+                {
+                    TRACE("Resizing.\n");
+                    XMoveResizeWindow( gdi_display, surface->window, 0, 0, width, height);
+                    set_dc_drawable( surface->draw_dc, surface->window, &rect );
+                    surface->width = width;
+                    surface->height = height;
+                }
+            }
+            else
+            {
+                set_dc_drawable( hdc, surface->window, &rect );
+            }
         }
         else
         {
@@ -530,8 +560,10 @@ static VkResult X11DRV_vkCreateSwapchainKHR(VkDevice device,
     create_info_host.surface = x11_surface->surface;

     /* unless we use XPresentPixmap, force fifo when running offscreen so the acquire fence is more likely to be vsynced */
-    if (x11_surface->offscreen && create_info->presentMode == VK_PRESENT_MODE_MAILBOX_KHR &&
-        !(use_xpresent && use_xfixes && usexcomposite))
+    if (x11_surface->gdi_blit_source)
+        create_info_host.presentMode = VK_PRESENT_MODE_IMMEDIATE_KHR;
+    else if (x11_surface->offscreen && create_info->presentMode == VK_PRESENT_MODE_MAILBOX_KHR &&
+        !(use_xpresent && use_xfixes && usexcomposite))
         create_info_host.presentMode = VK_PRESENT_MODE_FIFO_KHR;
     x11_surface->present_mode = create_info->presentMode;

@@ -560,6 +592,8 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
     VkResult res;
     VkXlibSurfaceCreateInfoKHR create_info_host;
     struct wine_vk_surface *x11_surface;
+    DWORD hwnd_pid;
+    RECT rect;

     TRACE("%p %p %p %p\n", instance, create_info, allocator, surface);

@@ -576,8 +610,43 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
     x11_surface->swapchain_count = 0;
     if (x11_surface->hwnd)
     {
-        x11_surface->window = create_client_window(create_info->hwnd, &default_visual);
-        x11_surface->hwnd_thread_id = NtUserGetWindowThread(x11_surface->hwnd, NULL);
+        x11_surface->hwnd_thread_id = NtUserGetWindowThread(x11_surface->hwnd, &hwnd_pid);
+        if (x11_surface->hwnd_thread_id && hwnd_pid != GetCurrentProcessId())
+        {
+            XSetWindowAttributes attr;
+
+            WARN("Other process window %p.\n", x11_surface->hwnd);
+            NtUserGetClientRect( x11_surface->hwnd, &rect );
+            x11_surface->width = max( rect.right - rect.left, 1 );
+            x11_surface->height = max( rect.bottom - rect.top, 1 );
+            x11_surface->client_colormap = XCreateColormap( gdi_display, get_dummy_parent(), default_visual.visual,
+                    (default_visual.class == PseudoColor || default_visual.class == GrayScale
+                    || default_visual.class == DirectColor) ? AllocAll : AllocNone );
+            attr.colormap = x11_surface->client_colormap;
+            attr.bit_gravity = NorthWestGravity;
+            attr.win_gravity = NorthWestGravity;
+            attr.backing_store = NotUseful;
+            attr.border_pixel = 0;
+            x11_surface->window = XCreateWindow( gdi_display,
+                                                 get_dummy_parent(),
+                                                 0, 0, x11_surface->width, x11_surface->height, 0,
+                                                 default_visual.depth, InputOutput,
+                                                 default_visual.visual, CWBitGravity | CWWinGravity |
+                                                 CWBackingStore | CWColormap | CWBorderPixel, &attr );
+            if (x11_surface->window)
+            {
+                XMapWindow( gdi_display, x11_surface->window );
+                XSync( gdi_display, False );
+                x11_surface->gdi_blit_source = TRUE;
+                x11_surface->other_process = TRUE;
+                x11_surface->draw_dc = NtGdiOpenDCW( NULL, NULL, NULL, 0, TRUE, NULL, NULL, NULL );
+                set_dc_drawable( x11_surface->draw_dc, x11_surface->window, &rect );
+            }
+        }
+        else
+        {
+            x11_surface->window = create_client_window(create_info->hwnd, &default_visual);
+        }
     }
     else
     {
@@ -593,7 +662,7 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
         goto err;
     }

-    if (vulkan_gdi_blit_source_hack)
+    if (!x11_surface->gdi_blit_source && vulkan_gdi_blit_source_hack)
     {
         RECT rect;

@@ -638,7 +707,7 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,

     *surface = (uintptr_t)x11_surface;

-    if (x11_surface->gdi_blit_source)
+    if (x11_surface->gdi_blit_source && !x11_surface->other_process)
     {
         /* Make sure window gets surface destroyed. */
         NtUserSetWindowPos( x11_surface->hwnd, 0, 0, 0, 0, 0,
From 46a904624f1c3f62df806e9f0bff2bfda6bdf727 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Wed, 22 Jun 2022 13:20:15 -0500
Subject: [PATCH] winex11.drv: Add WINE_DISABLE_VULKAN_OPWR option.

CW-Bug-Id: #20680
---
 dlls/winex11.drv/vulkan.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 090e7091335..2cb9ad949ae 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -23,6 +23,7 @@
 #include "config.h"

 #include <stdarg.h>
+#include <stdlib.h>
 #include <stdio.h>
 #include <dlfcn.h>

@@ -585,6 +586,17 @@ static VkResult X11DRV_vkCreateSwapchainKHR(VkDevice device,
     return result;
 }

+static BOOL disable_opwr(void)
+{
+    static int disable = -1;
+    if (disable == -1)
+    {
+        const char *e = getenv("WINE_DISABLE_VULKAN_OPWR");
+        disable = e && atoi(e);
+    }
+    return disable;
+}
+
 static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
         const VkWin32SurfaceCreateInfoKHR *create_info,
         const VkAllocationCallbacks *allocator, VkSurfaceKHR *surface)
@@ -616,6 +628,14 @@ static VkResult X11DRV_vkCreateWin32SurfaceKHR(VkInstance instance,
             XSetWindowAttributes attr;

             WARN("Other process window %p.\n", x11_surface->hwnd);
+
+            if (disable_opwr() && x11_surface->hwnd != NtUserGetDesktopWindow())
+            {
+                ERR("HACK: Failing surface creation for other process window %p.\n", create_info->hwnd);
+                res = VK_ERROR_OUT_OF_HOST_MEMORY;
+                goto err;
+            }
+
             NtUserGetClientRect( x11_surface->hwnd, &rect );
             x11_surface->width = max( rect.right - rect.left, 1 );
             x11_surface->height = max( rect.bottom - rect.top, 1 );
