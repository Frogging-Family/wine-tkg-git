# Created by: Tk-Glitch <ti3nou at gmail dot com>

pkgname=wine-tkg-git
pkgver=0

# workaround for pkgrel overwritten on regen
pkgrel=1
eval pkgrel=326

_stgsrcdir='wine-staging-git'
_esyncsrcdir='esync'
export _where="$PWD" # track basedir as different Arch based distros are moving srcdir around
_configure_args=() # additional args to ./configure will be added during prepare()
_makepkg_options=()

# load functions
source "$_where"/wine-tkg-scripts/prepare.sh
source "$_where"/wine-tkg-scripts/build.sh

exit_cleanup() {
  _exit_cleanup
  remove_deps || true
}

# init steps
if msg2; then # Arch chroot workaround for even more looping fun
  _init
fi

if [ -z "$_localbuild" ]; then
 _pkgnaming
fi

# custom plain wine commit to pass to git
if [ -n "$_plain_version" ]; then
  if [ "$_use_staging" = "false" ] || ( [ "$_use_staging" = "true" ] && [ "$_staging_upstreamignore" = "true" ] ); then
    _plain_commit="#commit=$_plain_version"
  fi
fi

# custom staging commit to pass to git
if [ "$_use_staging" = "true" ] && [ -n "$_staging_version" ]; then
  _staging_commit="#commit=$_staging_version"
fi

pkgdesc='This "Wine to rule them all" package is the result of some random pkgbuild found online. Looks safe to me, amirite? Some variants of it can be found in lutris runners.'
url='https://github.com/Tk-Glitch/PKGBUILDS/tree/master/wine-tkg-git'
arch=('x86_64')

# Don't strip if _pkg_strip is disabled
if [ "$_pkg_strip" != "true" ]; then
 _makepkg_options+=('!strip')
fi

# Only pass the staticlibs option to system-wide installs
if [ "$_EXTERNAL_INSTALL" != "true" ]; then
  _makepkg_options+=('staticlibs')
fi

# Use ccache if available
if msg2; then # Arch chroot workaround for even more looping fun
  if pacman -Qq ccache &> /dev/null; then
    msg2 'ccache was found and will be used'
    _makepkg_options+=('ccache')
  else
    msg2 'ccache was not found and will not be used'
  fi
fi

options=(${_makepkg_options[@]})

license=('LGPL')
depends=(
    'attr'                  'lib32-attr'
    'fontconfig'            'lib32-fontconfig'
    'lcms2'                 'lib32-lcms2'
    'libxml2'               'lib32-libxml2'
    'libxcursor'            'lib32-libxcursor'
    'libxrandr'             'lib32-libxrandr'
    'libxdamage'            'lib32-libxdamage'
    'libxi'                 'lib32-libxi'
    'gettext'               'lib32-gettext'
    'freetype2'             'lib32-freetype2'
    'glu'                   'lib32-glu'
    'libsm'                 'lib32-libsm'
    'gcc-libs'              'lib32-gcc-libs'
    'libpcap'               'lib32-libpcap'
    'faudio'                'lib32-faudio'
    'desktop-file-utils'    'jxrlib'
)

makedepends=('git' 'autoconf' 'ncurses' 'bison' 'perl' 'fontforge' 'flex'
    'gcc>=4.5.0-2'          'pkgconf'
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'gnutls'                'lib32-gnutls'
    'libxinerama'           'lib32-libxinerama'
    'libxcomposite'         'lib32-libxcomposite'
    'libxmu'                'lib32-libxmu'
    'libxxf86vm'            'lib32-libxxf86vm'
    'libldap'               'lib32-libldap'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'alsa-lib'              'lib32-alsa-lib'
    'libxcomposite'         'lib32-libxcomposite'
    'mesa'                  'lib32-mesa'
    'libgl'                 'lib32-libgl'
    'libxslt'               'lib32-libxslt'
    'libpulse'              'lib32-libpulse'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'gst-plugins-good'      'lib32-gst-plugins-good'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'libcups'               'lib32-libcups'
    'samba'                 'opencl-headers'
    'meson'                 'ninja'
    'glslang'               'wget'
    'ocl-icd'               'lib32-ocl-icd'
    'jack2'                 'lib32-jack2'
    $_user_makedeps
)

# mingw
if [ -z "${CUSTOM_MINGW_PATH}" ]; then
  makedepends+=('mingw-w64-gcc')
fi

# proton-tkg deps
if [ -e "$_where"/proton_tkg_token ]; then
  makedepends+=('fontforge' 'python-fonttools')
  depends+=('tk')
fi
if [ "$_build_mediaconv" = "true" ]; then
  depends+=('gst-plugins-ugly')
fi

# wine-mono deps
if [ "$_use_mono" = "true" ]; then
  depends+=('wine-mono')
fi

optdepends=(
    'giflib'                'lib32-giflib'
    'libpng'                'lib32-libpng'
    'libldap'               'lib32-libldap'
    'gnutls'                'lib32-gnutls'
    'mpg123'                'lib32-mpg123'
    'openal'                'lib32-openal'
    'v4l-utils'             'lib32-v4l-utils'
    'libpulse'              'lib32-libpulse'
    'alsa-plugins'          'lib32-alsa-plugins'
    'alsa-lib'              'lib32-alsa-lib'
    'libjpeg-turbo'         'lib32-libjpeg-turbo'
    'libxcomposite'         'lib32-libxcomposite'
    'libxinerama'           'lib32-libxinerama'
    'ncurses'               'lib32-ncurses'
    'libxslt'               'lib32-libxslt'
    'libva'                 'lib32-libva'
    'gtk3'                  'lib32-gtk3'
    'gst-plugins-base-libs' 'lib32-gst-plugins-base-libs'
    'vulkan-icd-loader'     'lib32-vulkan-icd-loader'
    'sdl2'                  'lib32-sdl2'
    'cups'                  'zapcc'
    'samba'                 'clang'
    'dosbox'                'ccache'
    'faudio'                'lib32-faudio'
    'schedtool'
)

# Wine source
if [ -n "$_custom_wine_source" ]; then
  _winesrcdir=$( sed 's|/|-|g' <<< $(sed 's|.*://.[^/]*/||g' <<< $_custom_wine_source))
  _winesrctarget="$_custom_wine_source"
else
  if [ "$_plain_mirrorsrc" = "true" ]; then
    _winesrcdir="wine-mirror-git"
    _winesrctarget="git+https://github.com/wine-mirror/wine.git"
  else
    _winesrcdir="wine-git"
    _winesrctarget="git://source.winehq.org/git/wine.git"
  fi
fi

if [ ! -e "$_where"/BIG_UGLY_FROGMINER ]; then
  find "$_where"/wine-tkg-patches -type f -not -path "*hotfixes*" -exec cp -n {} "$_where" \; && # copy patches inside the PKGBUILD's dir to preserve makepkg sourcing and md5sum checking
  cp "$_where"/wine-tkg-userpatches/*.my* "$_where" 2>/dev/null # copy userpatches inside the PKGBUILD's dir
fi

source=("$_winesrcdir"::"${_winesrctarget}${_plain_commit}"
		"$_stgsrcdir"::"git+https://github.com/wine-staging/wine-staging.git${_staging_commit}"
		# game specific
		'poe-fix.patch' # Enable Path of Exile DX11 to work
		'f4skyrimse-fix-1.patch' # Fo4 & Skyrim SE Script Extender fix 1/2 (merged with 12be24a)
		'f4skyrimse-fix-2.patch' # Fo4 & Skyrim SE Script Extender fix 2/2 (Fixed in 6672fc9+)
		'mtga-staging.patch' # Magic The Gathering: Arena crashfix
		'mtga-mainline.patch' # Magic The Gathering: Arena crashfix
		'mtga-legacy.patch' # Magic The Gathering: Arena crashfix (<aa0c4bb5e72caf290b6588bc1f9931cc89a9feb6)
		'mtga-legacy-addition.patch' # Hack to allow for msi installers of Magic The Gathering: Arena to succeed (on older than 5.0rc1)
		'sims_2-fix-legacy.patch' # Sims 2 fix for <4.1
		'sims_2-fix-4.2-.patch' # Sims 2 fix for 4.2 and lower
		'sims_2-fix.patch' # Sims 2 fix for 4.3+
		'sims_3-oldnvidia.patch' # No.
		'mwo.patch' # Mechwarrior Online fix
		'pythonfix.patch' # Backported Python/Sims4 squash patch for <=3.18
		'resident_evil_4_hack.patch' # Fixes broken rendering
		'childwindow.patch' # Child window rendering support for vk - Fixes World of Final Fantasy and others
		'warframe-launcher.patch' # Fix for Warframe Launcher failing to update itself
		'ffxiv-launcher-workaround.patch' # Workaround for Final Fantasy XIV Launcher 404 error
		'leagueoflolfix.patch' # LoL 9.20+ fix - Requires vdso32 disabled (echo 0 > /proc/sys/abi/vsyscall32)
		'overwatch-mfstub.patch' # Overwatch mf crash workaround
		'assettocorsa_hud_perf.patch' # Fix for Assetto Corsa performance drop when HUD elements are displayed
		'mk11.patch' # Fix for Mortal Kombat 11
		'proton-windows.gaming.input.patch' # Proton's windows.gaming.input patchset, for Death Stranding (staged as of c4b73e17)
		# esync
		'esync-staging-fixes-r1.patch' # For 3.10-3.16 - Untested on lower than 3.10
		'esync-staging-fixes-r2.patch' # For 3.17+
		'esync-staging-fixes-r3.patch' # For 3.20+
		'esync-no_alloc_handle.patch' # esync staging extended support patch (<4.5)
		'esync-compat-fixes-r1.patch'  # For 3.10-3.16 - Untested on lower than 3.10
		'esync-compat-fixes-r1.1.patch' # Addon for 3.14-3.16
		'esync-compat-fixes-r2.patch' # For 3.17+
		'esync-compat-fixes-r2.1.patch' # Addon for 3.19+ - non-staging only
		'esync-compat-fixes-r3.patch' # For 3.20+
		'esync-compat-fixes-r3.1.patch' # Addon for 4.4+
		'esync-compat-fixes-r3.2.patch' # Addon for 4.5+
		'esync-compat-fixes-r3.3.patch' # Addon for 4.6+ (b3c8d5d)
		'esync-compat-fixes-r3.4.patch' # Addon for 4.6+ (4c0e817)
		'esync-compat-fixes-r3.5.patch' # Addon for 4.6+ (f534fbd)
		'esync-compat-fixes-r3.6.patch' # Addon for 4.8+ (29914d5)
		'esync-compat-fixes-r3.7.patch' # Addon for 4.20+ (608d086)
		'esync-compat-fixes-r3.8.patch' # Addon for 4.20+ (4538a13)
		'esync-compat-fixes-r3.9.patch' # Addon for 4.21+ (b934f66)
		'esync-compat-fixes-r3.10.patch' # Addon for 4.21+ (fc17535)
		'esync-compat-fixes-r3.11.patch' # Addon for 5.5+ (b664ae8)
		'esync-compat-fixes-r3.12.patch' # Addon for 5.6+ (8701260)
		'esync-compat-fixes-r3.13.patch' # Addon for 5.7+ (40e849f)
		'esync-compat-fixes-r3.14.patch' # Addon for 5.8+ (e5030a4)
		'esync-compat-fixes-r3.15.patch' # Addon for 5.8+ (2633a5c)
		'esync-compat-fixes-r3.16.patch' # Addon for 5.9+ (a1c46c3)
		'esync-no_kernel_obj_list.patch' # esync extended support patch (4.5+)
		# fsync
		'fsync-mainline.patch' # Fsync patchset, introduced with Proton 4.11-1
		'fsync-staging.patch' # Fsync patchset, introduced with Proton 4.11-1 - Staging edition
		'fsync-staging-no_alloc_handle.patch' # Add no_alloc_handle object method to fsync for staging
		'fsync-spincounts.patch' # Add a configurable spin count to fsync
		# pba
		'PBA313-.patch' # For 3.10-3.13 - Untested on lower than 3.10
		'PBA314+.patch' # For 3.14-3.16
		'PBA317+.patch' # For 3.17-3.18
		# misc
		'wine-tkg.patch' # Do NOT report bugs at winehq when using custom build
		'wine-tkg-staging.patch' # Do NOT report bugs at winehq when using custom build - staging
		'steam.patch' # auto-append --no-sandbox
		'30-win32-aliases.conf' # 32-bit font antialiasing
		'use_clock_monotonic.patch' # Perf
		'use_clock_monotonic-2.patch' # Addon for the patch above, needed on 13e11d3+
		'lowlatency_audio.patch' # wine osu! lowlat patch
		'wine-binfmt.conf' # Enables launching windows executables directly
		'CSMT-toggle.patch' # Corrected CSMT switch logic
		'GLSL-toggle.patch' # Toggles OpenGL shading language
		'launch-with-dedicated-gpu-desktop-entry.patch'
		'plasma_systray_fix.patch' # Systray fix for winex11
		'faudio-exp.patch' # Faudio experimental support
		'enable_stg_shared_mem_def.patch' # Enable STAGING_SHARED_MEMORY by default
		'legacy-LAA.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override (<4.2)
		'legacy-LAA-staging.patch' # Same as above, for staging
		'LAA.patch' # IMAGE_FILE_LARGE_ADDRESS_AWARE override
		'LAA-staging.patch' # Same as above, for staging
		'winevulkan-1.1.103.patch' # Update winevulkan
		'winevulkan-1.1.113.patch' # Update winevulkan
		'high-core-count-fix.patch' # High core count setup fix for <=4.0
		'nvidia-hate.patch' # novideo hate patch to disable nvapi, nvcuda etc.
		'virtual_desktop_refreshrate.patch' # Add custom fake refreshrate to virtual desktop
		'0001-kernelbase-Remove-DECLSPEC_HOTPATCH-from-SetThreadSt.patch' # Native dotnet workaround for 4.13+
		'usvfs.patch' # USVFS (Mod Organizer 2's virtual filesystem) patch
		'revert-c6b6935.patch' # Reverts c6b6935 due to https://bugs.winehq.org/show_bug.cgi?id=47752
		'proton-tkg-kernelbase-reverts.patch' # Reverts 05d0027, 0f5538b, c5dc41e, a5d45e9, 619bd16 and 8d25965 (moving various funcs to kernelbase). This is required for proton-tkg and fixes some dll loading issues (with Cemu notably)
		'proton-tkg-staging-kernelbase-reverts.patch' # Staging version of the above patch
		'staging-44d1a45-localreverts.patch' # local reverts for staging 44d1a45+fshack
		'd3d12-fixes.patch' # Fixes for d3d12 support through vkd3d From HansKristan - https://www.winehq.org/pipermail/wine-devel/2019-October/152356.html - https://www.winehq.org/pipermail/wine-devel/2019-October/152357.html
		'josh-flat-theme.patch' # Joshua Ashton's take on making wine dialogs and menus less win95-ish - https://github.com/Joshua-Ashton/wine/tree/wine-better-theme
		# proton
		'FS_bypass_compositor.patch' # Perf
		'FS_bypass_compositor-disabler.patch' # Disabler for the actual bypass
		'valve_proton_fullscreen_hack.patch' # Proton FS hack
		'valve_proton_fullscreen_hack-staging.patch' # Proton FS hack (staging)
		'valve_proton_fullscreen_hack_realmodes.patch' # Real modes listing in FS hack
		'proton_fs_hack_integer_scaling.patch' # Integer scaling for FS hack
		'proton-rawinput.patch' # Proton compatible rawinput patchset
		'winevulkan-1.1.113-proton.patch' # Update winevulkan - Proton edition
		'proton-tkg-8d25965.patch' # Proton-tkg (<8d25965)
		'proton-tkg.patch' # Proton-tkg
		'proton-tkg-rpc.patch' # necessary pre-patch for Proton-tkg
		'proton-tkg-staging.patch' # Proton-tkg-staging
		'proton-tkg-staging-rpc.patch' # necessary pre-patch for Proton-tkg-staging
		'proton-tkg-steamclient-swap.patch' # Key steamclient substitution hack
		'msvcrt_nativebuiltin_mainline.patch' # Enforce mscvrt Dlls to native then builtin - from Proton - mainline
		'msvcrt_nativebuiltin.patch' # Enforce mscvrt Dlls to native then builtin - from Proton
		'proton-sdl-joy.patch' # Proton SDL joystick support
		'proton-sdl-joy-2.patch' # Proton SDL joystick support additions for newer trees
		'proton-gamepad-additions.patch' # Proton 4.11-7 xinput hacks and other gamepad additions
		'proton-vk-bits-4.5.patch' # Proton vk bits for 4.5+
		'proton-restore-unicode.patch' # Restore installing wine/unicode.h to please Proton
		'proton_mf_hacks.patch' # Workarounds to prevent crashes on some mf functions
		'proton-wined3d-additions.patch' # Proton non-vr-related wined3d additions
		'staging-winex11-key_translation.patch' # Older version of that staging patchset specifically for proton-tkg with fs hack disabled
		'proton-staging_winex11-MWM_Decorations.patch' # Proton friendly version of that staging patchset
		'proton-vr.patch' # wined3d interop and friends for steamvr support
		'proton-win10-default-staging.patch' # Set default wine version to win10 - staging
		'proton-win10-default.patch' # Set default wine version to win10
		'proton-steam-bits.patch' # Proton's steam-centric patches
		'dxvk_config_dxgi_support.patch' # Add support for dxvk_config library to Wine's dxgi
		'proton-winevulkan.patch' # Winevulkan-specific patches
		'proton-winevulkan-nofshack.patch' # Winevulkan-specific patches - for FS hack disabled
		'proton-seccomp-envvar.patch' # Guard seccomp with the WINESECCOMP envvar - Depends on staging
		'proton-pa-staging.patch' # Unstaged proton PA additions
		'server_Abort_waiting_on_a_completion_port_when_closing_it-no_alloc_handle.patch' # Proton patch introduced with 5.0-8 (for no_alloc_handle)
		'server_Abort_waiting_on_a_completion_port_when_closing_it.patch' # Proton patch introduced with 5.0-8
)
md5sums=('SKIP'
         'SKIP'
         'a49bc2bb374d5ea5045ada5401cd91a3'
         '16acd00eb3ccc65687850002b818859c'
         '496204bf74c34db41dfc3f4075375145'
         'a8cc2ae57cd6e8c2291d283cf89701e3'
         'a8cc2ae57cd6e8c2291d283cf89701e3'
         '8dba1e638cf96b43a991046807f3277a'
         '981ec68c116eed8a8e388b95401c3db8'
         '6e301f262f004b930ffc3000839d837b'
         'cd52a9b26c15fd210cd5ed1da178dcb1'
         '65906da954430bde504dd47a69f23f6f'
         '342a6e02f73c06120ce01cc887489d9c'
         'd34ec9e86cbbf48b485a8c6f99d24921'
         'a527081e5f6eca3aec0b390d96d8587b'
         'f063189ec090d9071397d455d271199d'
         '21632a2c20ba78c7e9eff86b5b396f0d'
         '5b07ab957a128801b6c45e30b31432a7'
         '5ab8c70c4b01151688482ed52a522c9f'
         '528f610111d62158dc7c0578cbbb362e'
         'cf308e18ad3724e4872280ec35e25338'
         '8a6d9ad92d3becae6bd9dbb05d7d6f48'
         'afb2442fda11d750bb8a6d77162784c4'
         '6f64639625363288f3022824181dc695'
         'dd993e03188c86631e6c2cbdf14113aa'
         'b997bf4bae2d08f7e84870c8c91fb08b'
         '374ffc1d29488dd3fdac7d01f55964d4'
         '46f612602ee7698b840a4e757194cfa7'
         '3a263a0f6211287af53ea7db79b1f34f'
         '4e1b9cc09a01749c07230c7241526371'
         'c4b104892b0501781789aadc5a95b261'
         'e32c770f6aa964e6093fe734c7dd6c0a'
         'd86e0feaeb690efe521ac3cc852fac12'
         'f3c95dcaeab28d8b97e80a5e9d9a1c01'
         'b10e6f8732dbc1e07b59730f9aeea21e'
         '2235fbda559247a0eb0d37d9fd6d87b5'
         '85140d04dfeb80619c9d6c90bc89f925'
         '358093d65dba3fa477065fe21ce85874'
         'f80f0a4743b4a3e39c523b85c46e13d5'
         '53d96ebf21d5162a58de7e3e37d883a3'
         'ddd8134ecb39c56d93d282e8c6fd88ea'
         '82933bb72be626a0f318593eeef67e06'
         '5b530e9296fbc05556f7754de3cfde66'
         '49261f23f9c80fa01785753b14bbea68'
         '0c6f91ac41a5dbfea95d5e469214fccf'
         '3c2f154f9851f184060f962f94d4a88a'
         '21b8968a2ab32ef58d0caccb26c22a09'
         '1840eadc826b1833a6253e6667286b55'
         '7b768c675fe8f45b05b9d81bb98f8178'
         '83696ccf73ee8f6d1b68f0023716bdf4'
         '1f39b38569ec6a96db821565b4ed1f54'
         '17d704d242c5984ef7dc3ac92f26070a'
         'ff418685a55dbe3d4a14dfd1c9cde41c'
         'bffa790ed063a371d65957fa8f5a87d2'
         '0a8e5406472ae39c0687bc017edfb352'
         'c77e94d56f57d27dd26e9f99cbcd5bc3'
         'd27ec22ee6815a97b4d28ccdfc0420fe'
         '9cf9e00e9b861bf23d6783891ec877d3'
         'ba24698e0e4ba5c9a74bb55fdff2f6c7'
         'ca9c5c635f2c7b2236fbc159c69490f3'
         '1ff4e467f59409272088d92173a0f801'
         '8af862687df7b71c5354b24a9b3acc8a'
         'd2e54ed8d69b808c26065e643b2244bb'
         'ed6060dc030ebd5865f1fcc40d8863be'
         'cff441678d798466a13a0d03b01e23d7'
         'ccdb3f73cc5be5fe9ac0207a164b34bc'
         '65d47ea14d7c666d6308fc65a5ccd729'
         '3aafb27f35d4817942085d87904dcfc8'
         '49c44bf1b15741358e064fba28092f4e'
         '6262b0ff26fd1e00eb6123db5e0a4160'
         '07b48859d0b274c9b35be4de3016ae27'
         '7446f74dedc3a7eaf5aaeed6adcab2e3'
         '4368dad1869932648fa1702f2c0053e7'
         '304cdb4144f9a01594353b60ca5366df'
         'd5e6910bb7319f6e986b69cbe156a379'
         '1c4738e438debf72266b96d09f465b25'
         '9cabed407e00dc03ec4cd9e023285d76'
         'd047619c11d95c4c9bbefae564876950'
         'bcf6dd7c16f37f20cca6ec4edfab5b34'
         'b415db953ef35b73c1608bc360356113'
         'eba48702691263469da644495f9e1bfd'
         '566ffc5356fc4713108185f9fd870038'
         '180accf6a6ea2102956716c863e2bfda'
         'b1ed3fe1cf1d2c0bc4e10d4233f7e2d9'
         '43c81f7c81f6d2719af71309b64363be'
         'd3340a177d39c949634fbc8af6c98eda'
         '2156fa1d317ac7179d36ac179bbb9049'
         '913aad30993cc257046129cbf51f8be4'
         '5ca4ee142eafe2c8873d59b2feb51a7d'
         '684d1c60aa38a659b1dd792b1d7cd8f5'
         '84151397310fcbbe70d44f55eb7100a5'
         'ce083202e3a4300e576584c45ab921f8'
         '4df9cd990a78606d3cd0dc0673bb141f'
         'a784c182c65c20cbb29b6473abae171d'
         'f2db9103d6527377746540a9f8860c2f'
         '15995e43af57b18bf7b45cc2d5af4f2d'
         '6f7cc6eb54f700d57006897e8c50a6a3'
         'e208be1a4ee202dd0da2321e94841090'
         '7d9a7cf523c7283c64266148707b8bac'
         '418fd25a825c76c3b62717ee4d6d4bbb'
         'f404adafc8648495270e01241cd0601e'
         '872bc9cc65ec8ce9603ac052b7468326'
         '3d5518c89320a59400774a86b9a1cf2f'
         '0310c86f736d1c9f35cdabdaedea9396'
         '36f87fdbd180823221b34bc91ad651c7'
         'aa3d7083feafc62f0c6427e0b98c42e2'
         '3ac0f9d110f954cda629ccda21b95ed8'
         'b4a6fd86caa3b7a0c930f4d9b402e7cb'
         'eea40375be4cd3615eaef5412802274b'
         'e6ae0a4c8c0c54a3c8a6bb7010c202d0'
         '6a3515ac9aef8948d8be01a110a5c066'
         'c5f18404f3317850be70751942d425c0'
         '0ff98b5896960aaac59b3977f2b869ac'
         '18730b0f9bda4d2b73df668479b38027'
         'c8209c8e486c478fb64d5c1eaa87c1da'
         '3d7f6a56676689c811f659c11a9f3f2d'
         '1bec6f09407dc6f0f410a7ef08a5baa1'
         '87eb77f746f8c29bc8cff1d4dfce4bdc'
         '17979c61682046d31c1508702ed1a0bb'
         'ddf4b9957d86d9dcc6fb4893491a0146'
         '853baac75d041f8b1c4f3543b5ee47dd'
         '1c3cee53163f031ab3af9ed576bab151'
         '6d05eb9a910d693201f4e045284bb868'
         'c901e211d5563c2a38a069860a52837a')

if [ "$_EXTERNAL_INSTALL" = "true" ]; then
  provides=(
    "$pkgname=$pkgver"
  )
  conflicts=("$pkgname")
else
  provides=(
    "wine=$pkgver"
    "wine-wow64=$pkgver"
    "wine-staging=$pkgver"
    "wine-esync=$pkgver"
  )
  conflicts=('wine' 'wine-wow64' 'wine-staging' 'wine-esync')
  if [[ "$pkgname" == *-git ]]; then
    replaces=("${pkgname/%-git/-faudio-git}")
  fi
fi

if [ -n "$_localbuild" ]; then
  _winesrcdir="$_localbuild"
  _use_staging="false"
  pkgname="$_localbuild"
  if [ -n "$_PKGNAME_OVERRIDE" ]; then
    if [ "$_PKGNAME_OVERRIDE" = "none" ]; then
      pkgname="${pkgname}"
    else
      pkgname="${pkgname}-${_PKGNAME_OVERRIDE}"
    fi
    if msg2; then # Arch chroot workaround for even more looping fun
      msg2 "Overriding default pkgname. New pkgname: ${pkgname}"
    fi
  fi
fi

makedepends=("${makedepends[@]}" "${depends[@]}")

nonuser_patcher() {
  if [ "$_NUKR" != "debug" ] || [[ "$_DEBUGANSW1" =~ [yY] ]]; then
    if [ "$_nopatchmsg" != "true" ]; then
      _fullpatchmsg=" -- ( $_patchmsg )"
    fi
    msg2 "Applying ${_patchname}"
    echo -e "\n${_patchname}${_fullpatchmsg}" >> "$_where"/prepare.log
    patch -Np1 < ../"$_patchname" >> "$_where"/prepare.log || (error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience." && exit 1)
    echo -e "${_patchname}${_fullpatchmsg}" >> "$_where"/last_build_config.log
  fi
}

pkgver() {
	if [ "$_use_staging" = "true" ]; then
	  cd "${srcdir}/${_stgsrcdir}"
	else
	  cd "${srcdir}/${_winesrcdir}"
	fi

	# retrieve current wine version - if staging is enabled, staging version will be used instead
	_describe_wine
}

prepare() {
	# Symlink legacy patches to srcdir
	if [ "$_NUKR" != "debug" ] || [[ "$_DEBUGANSW1" =~ [yY] ]]; then
	  for _sympatch in "$_where"/*.patch; do
	    if [[ ! "${source[@]##*/}" =~ "${_sympatch##*/}" ]]; then
	      ln -s "$_sympatch" "$srcdir/"
	    fi
	  done
	fi

	# state tracker start - FEAR THE MIGHTY FROG MINER
	touch "${_where}"/BIG_UGLY_FROGMINER

	# prepare steps
	if [ -z "$_localbuild" ]; then
	  _source_cleanup > "$_where"/prepare.log
	  _prepare
	else
	  echo -e "Building local source $_localbuild" > "$_where"/prepare.log
	fi
	_polish
	_makedirs

    if [ "$_allow_server_rt_prio" = "true" ] || [ "$_allow_wine_net_raw" = "true" ]; then
      if [ "$_EXTERNAL_INSTALL" = "true" ]; then
        if [ "$_EXTERNAL_NOVER" = "true" ]; then
          _serverpath="$_DEFAULT_EXTERNAL_PATH/$pkgname/bin/wineserver"
          _preloaderpath="$_DEFAULT_EXTERNAL_PATH/$pkgname/bin/wine-preloader"
          _preloader64path="$_DEFAULT_EXTERNAL_PATH/$pkgname/bin/wine64-preloader"
        else
          if [ "$_use_staging" = "true" ]; then
            cd "$srcdir/$_stgsrcdir"
          else
            cd "$srcdir/$_winesrcdir"
          fi
          _realwineversion=$(_describe_wine)
          _serverpath="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion/bin/wineserver"
          _preloaderpath="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion/bin/wine-preloader"
          _preloader64path="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion/bin/wine64-preloader"
        fi
      else
        _serverpath="/usr/bin/wineserver"
        _preloaderpath="/usr/bin/wine-preloader"
        _preloader64path="/usr/bin/wine64-preloader"
      fi
      cp "$_where"/wine.install "$_where"/wine-tkg.install
      sed -i "s|#echo \"Setting wineserver and/or wine-preloader capabilities\"|echo \"Setting wineserver and/or wine-preloader capabilities\"|g" "$_where"/wine-tkg.install
      if [ "$_allow_server_rt_prio" = "true" ] && [ "$_allow_wine_net_raw" != "true" ]; then
        sed -i "s|#setcap cap_net_raw+eip /usr/bin/wineserver 2>/dev/null|setcap cap_sys_nice+ep $_serverpath 2>/dev/null|g" "$_where"/wine-tkg.install
      fi
      if [ "$_allow_wine_net_raw" = "true" ] && [ "$_allow_server_rt_prio" != "true" ]; then
        sed -i "s|#setcap cap_net_raw+eip /usr/bin/wineserver 2>/dev/null|setcap cap_net_raw+eip $_serverpath 2>/dev/null|g" "$_where"/wine-tkg.install
      fi
      if [ "$_allow_wine_net_raw" = "true" ] && [ "$_allow_server_rt_prio" = "true" ]; then
        sed -i "s|#setcap cap_net_raw+eip /usr/bin/wineserver 2>/dev/null|setcap cap_sys_nice,cap_net_raw+eip $_serverpath 2>/dev/null|g" "$_where"/wine-tkg.install
      fi
      if [ "$_allow_wine_net_raw" = "true" ]; then
        sed -i "s|#setcap cap_net_raw+eip /usr/bin/wine-preloader 2>/dev/null|setcap cap_net_raw+eip $_preloaderpath 2>/dev/null|g" "$_where"/wine-tkg.install
        sed -i "s|#setcap cap_net_raw+eip /usr/bin/wine64-preloader 2>/dev/null|setcap cap_net_raw+eip $_preloader64path 2>/dev/null|g" "$_where"/wine-tkg.install
      fi
    fi
}

build() {
  _prebuild_common

  local _prefix=/usr
  local _lib32name="lib32"
  local _lib64name="lib"

  # configure args
  if [ -n "$_configure_userargs64" ]; then
    _configure_args64+=($_configure_userargs64)
  fi
  if [ -n "$_configure_userargs32" ]; then
    _configure_args32+=($_configure_userargs32)
  fi

  # External install
  if [ "$_EXTERNAL_INSTALL" = "true" ]; then
    _lib32name="lib" && _lib64name="lib64"
    if [ "$_EXTERNAL_NOVER" = "true" ]; then
      _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname"
    else
      if [ "$_use_staging" = "true" ]; then
        cd "$srcdir/$_stgsrcdir"
      else
        cd "$srcdir/$_winesrcdir"
      fi
      _realwineversion=$(_describe_wine)
      _prefix="$_DEFAULT_EXTERNAL_PATH/$pkgname-$_realwineversion"
    fi
    _configure_args64+=(--libdir="$_prefix/$_lib64name")
    _configure_args32+=(--libdir="$_prefix/$_lib32name")
  elif [ "$_EXTERNAL_INSTALL" = "proton" ]; then
    _prefix="$_where"
    _configure_args+=(--without-curses)
  else
    _configure_args64+=(--libdir="$_prefix/$_lib64name")
    _configure_args32+=(--libdir="$_prefix/$_lib32name")
  fi

  if [ "$_SKIPBUILDING" != "true" ] && [ "$_NOCOMPILE" != "true" ]; then
    _build
  fi
}

package() {
  if [ "$_allow_server_rt_prio" = "true" ]; then
    install=wine-tkg.install
  else
    install=wine.install
  fi

  if [ "$_NOCOMPILE" != "true" ]; then
    _package_makepkg
  fi
}

trap exit_cleanup EXIT
