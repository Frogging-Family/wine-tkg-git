#!/bin/bash

# DEPENCENCY RESOLUTIION FOR WINE-TKG-BUILDER

# This script is meant to be sourced by the main build script.  It uses dynamic function calling to install packages based on the distro, which is a much more streamlined
# way of handling dependencies than the old way of having a bunch of if/else statements.  It also allows for the use of different package managers, and different priviledge
# escalation commands, which is useful for different distros.

# BEST PRACTICE NOTICE
#
# The only functions you should call from this script publically are _install_deps and _remove_deps.  The rest of the functions are used internally by the script

# Ensure this script is being sourced, not ran directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "This script is meant to be sourced, not ran directly."
  exit 1
fi

# List of packages to install for each distro (64-bit) - edit here
ubuntu_pkgs_64=(git libunwind-dev autoconf bison ccache debhelper desktop-file-utils docbook-to-man docbook-utils docbook-xsl flex fontforge gawk gettext libacl1-dev libasound2-dev libcapi20-dev libcups2-dev libdbus-1-dev libgif-dev libglu1-mesa-dev libgphoto2-dev libgsm1-dev libgtk-3-dev libkrb5-dev libxi-dev liblcms2-dev libldap2-dev libmpg123-dev libncurses5-dev libopenal-dev libosmesa6-dev libpcap-dev libpulse-dev libsane-dev libssl-dev libtiff5-dev libudev-dev libv4l-dev libva-dev libxslt1-dev libxt-dev ocl-icd-opencl-dev oss4-dev prelink sharutils unixodbc-dev valgrind schedtool libfreetype6-dev xserver-xorg-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gcc-multilib g++-multilib curl fonttools libsdl2-dev python3-tk libvulkan1 libc6-dev linux-libc-dev libkdb5-* libppl14 libcolord2 libvulkan-dev libgnutls28-dev libpng-dev libkadm5clnt-mit* libkadm5srv-mit* libavcodec-dev libavutil-dev libswresample-dev libavcodec58 libswresample3 libavutil56 libvkd3d-dev libxinerama-dev libxcursor-dev libxrandr-dev libxcomposite-dev mingw-w64 glslang-dev glslang-tools meson wget python3-pefile rustc cargo python3-ldb samba-libs samba-dev libgcrypt20-dev libusb-1.0-0-dev yasm jq)
debian_pkgs_64=(git libunwind-dev autoconf bison ccache debhelper desktop-file-utils docbook-to-man docbook-utils docbook-xsl flex fontforge gawk gettext libacl1-dev libasound2-dev libcapi20-dev libcups2-dev libdbus-1-dev libgif-dev libglu1-mesa-dev libgphoto2-dev libgsm1-dev libgtk-3-dev libkrb5-dev libxi-dev liblcms2-dev libldap2-dev libmpg123-dev libncurses5-dev libopenal-dev libosmesa6-dev libpcap-dev libpulse-dev libsane-dev libssl-dev libtiff5-dev libudev-dev libv4l-dev libva-dev libxslt1-dev libxt-dev ocl-icd-opencl-dev oss4-dev prelink sharutils unixodbc-dev valgrind schedtool libfreetype6-dev xserver-xorg-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev gcc-multilib g++-multilib curl fonttools libsdl2-dev python3-tk libvulkan1 libc6-dev linux-libc-dev libkdb5-* libppl14 libcolord2 libvulkan-dev libgnutls28-dev libpng-dev libkadm5clnt-mit* libkadm5srv-mit* libavcodec-dev libavutil-dev libswresample-dev libavcodec58 libswresample3 libavutil56 libvkd3d-dev libxinerama-dev libxcursor-dev libxrandr-dev libxcomposite-dev mingw-w64 glslang-dev glslang-tools meson wget python3-pefile rustc cargo python3-ldb samba-libs samba-dev libgcrypt20-dev libusb-1.0-0-dev yasm jq)
fedora_pkgs_64=(git make ccache gcc-c++ mingw32-gcc mingw64-gcc SDL2-devel openal-soft-devel opencl-headers ocl-icd-devel libvkd3d-devel icoutils vulkan-devel lcms2-devel gstreamer1-devel gstreamer1-plugins-base-devel libmpg123-devel gtk3-devel libva-devel fontforge fontpackages-devel gsm-devel libjpeg-turbo-devel libudev-devel libv4l-devel pulseaudio-libs-devel lzma audiofile-devel giflib-devel ImageMagick-devel libpcap-devel libXxf86dga-devel mesa-libOSMesa-devel libgphoto2-devel alsa-lib-devel autoconf bison coreutils cups-devel dbus-devel desktop-file-utils flex fontconfig-devel freetype-devel freeglut-devel gawk xz gettext-devel gnutls-devel krb5-devel libattr-devel libieee1284-devel libpng-devel librsvg2 librsvg2-devel libstdc++-devel libtiff-devel libX11-devel libXcomposite-devel libXcursor-devel libXext-devel libXi-devel libXinerama-devel libxml2-devel libXmu-devel libXrandr-devel libXrender-devel libxslt-devel libXxf86vm-devel mesa-libGL-devel mesa-libGLU-devel ncurses-devel openldap-devel sane-backends-devel unixODBC-devel unzip util-linux zlib-devel fonttools wget python-pefile rust cargo glslang patch libpng-static.x86_64 libgcrypt-devel libXpresent-devel yasm jq)
arch_pkgs_64=(attr fontconfig lcms2 libxml2 libxcursor libxrandr libxdamage libxi gettext freetype2 glu libsm gcc-libs libpcap desktop-file-utils git autoconf ncurses bison perl fontforge flex gcc pkgconf giflib libpng gnutls libxinerama libxcomposite libxmu libxxf86vm libldap mpg123 openal v4l-utils alsa-lib mesa libgl libxslt libpulse libva glib2-devel gtk3 gst-plugins-base-libs gst-plugins-good vulkan-headers vulkan-icd-loader sdl2 libcups samba opencl-headers meson ninja glslang wget ocl-icd giflib libpng alsa-plugins libjpeg-turbo cups dosbox ccache schedtool mingw-w64-gcc python-fonttools python-pefile rust gst-plugins-ugly libxpresent libgcrypt yasm jq libusb)
unknown_pkgs_64=() # prevent illegal function call on bad distro, keep this line

# List of packages to install for each distro (32-bit) - edit here
ubuntu_pkgs_32=(libunwind-dev:i386 xserver-xorg-dev:i386 libfreetype6-dev:i386 libfontconfig1-dev:i386 libglu1-mesa-dev:i386 libglu1-mesa:i386 libgl1-mesa-dev:i386 libgl1:i386 libosmesa6-dev:i386 libosmesa6:i386 mesa-common-dev:i386 libegl1-mesa-dev:i386 libegl-dev:i386 libgl-dev:i386 libglx-dev:i386 libglx0:i386 libllvm12:i386 libgles-dev:i386 libglvnd-dev:i386 libgles2-mesa-dev:i386 libvulkan-dev:i386 libvulkan1:i386 libpulse-dev:i386 libopenal-dev:i386 libncurses-dev:i386 libvkd3d-dev:i386 libgnutls28-dev:i386 libtiff-dev:i386 libldap-dev:i386 libcapi20-dev:i386 libpcap-dev:i386 libxml2-dev:i386 libmpg123-dev:i386 libgphoto2-dev:i386 libsane-dev:i386 libcupsimage2-dev:i386 libgsm1-dev:i386 libxslt1-dev:i386 libv4l-dev:i386 libudev-dev:i386 libxi-dev:i386 liblcms2-dev:i386 libibus-1.0-dev:i386 libsdl2-dev:i386 ocl-icd-opencl-dev:i386 libxinerama-dev:i386 libxcursor-dev:i386 libxrandr-dev:i386 libxcomposite-dev:i386 libavcodec58:i386 libswresample3:i386 libavutil56:i386 valgrind:i386 libgcrypt20-dev:i386 samba-libs:i386 python3-ldb:i386 python3-talloc:i386 python3:i386 samba-dev:i386 libusb-1.0-0-dev:i386 libgstreamer1.0-dev:i386 libgstreamer-plugins-base1.0-dev:i386)
debian_pkgs_32=(libunwind-dev:i386 xserver-xorg-dev:i386 libfreetype6-dev:i386 libfontconfig1-dev:i386 libglu1-mesa-dev:i386 libglu1-mesa:i386 libgl1-mesa-dev:i386 libgl1:i386 libosmesa6-dev:i386 libosmesa6:i386 mesa-common-dev:i386 libegl1-mesa-dev:i386 libegl-dev:i386 libgl-dev:i386 libglx-dev:i386 libglx0:i386 libllvm12:i386 libgles-dev:i386 libglvnd-dev:i386 libgles2-mesa-dev:i386 libvulkan-dev:i386 libvulkan1:i386 libpulse-dev:i386 libopenal-dev:i386 libncurses-dev:i386 libvkd3d-dev:i386 libgnutls28-dev:i386 libtiff-dev:i386 libldap-dev:i386 libcapi20-dev:i386 libpcap-dev:i386 libxml2-dev:i386 libmpg123-dev:i386 libgphoto2-dev:i386 libsane-dev:i386 libcupsimage2-dev:i386 libgsm1-dev:i386 libxslt1-dev:i386 libv4l-dev:i386 libudev-dev:i386 libxi-dev:i386 liblcms2-dev:i386 libibus-1.0-dev:i386 libsdl2-dev:i386 ocl-icd-opencl-dev:i386 libxinerama-dev:i386 libxcursor-dev:i386 libxrandr-dev:i386 libxcomposite-dev:i386 libavcodec58:i386 libswresample3:i386 libavutil56:i386 valgrind:i386 libgcrypt20-dev:i386 samba-libs:i386 python3-ldb:i386 python3-talloc:i386 python3:i386 samba-dev:i386 libusb-1.0-0-dev:i386 libgstreamer1.0-dev:i386 libgstreamer-plugins-base1.0-dev:i386)
fedora_pkgs_32=(pkgconf.i686 gcc-c++.i686 glibc-devel.i686 libX11-devel.i686 libXcomposite-devel.i686 libXcursor-devel.i686 libXext-devel.i686 libXi-devel.i686 libXinerama-devel.i686 libxml2-devel.i686 libXmu-devel.i686 libXrandr-devel.i686 libXrender-devel.i686 libxslt-devel.i686 libXxf86vm-devel.i686 mesa-libGL-devel.i686 mesa-libGLU-devel.i686 ncurses-devel.i686 openldap-devel.i686 freetype-devel.i686 SDL2-devel.i686 openal-soft-devel.i686 ocl-icd-devel.i686 libvkd3d-devel.i686 lcms2-devel.i686 gstreamer1-devel.i686 gstreamer1-plugins-base-devel.i686 gtk3-devel.i686 libva-devel.i686 giflib-devel.i686 libpcap-devel.i686 libXxf86dga-devel.i686 mesa-libOSMesa-devel.i686 libgphoto2-devel.i686 alsa-lib-devel.i686 cups-devel.i686 dbus-devel.i686 fontconfig-devel.i686 libpng-devel.i686 libjpeg-turbo-devel.i686 pulseaudio-libs-devel.i686 gnutls-devel.i686 krb5-devel.i686 krb5-libs.i686 libstdc++-devel.i686 vulkan-loader-devel.i686 libv4l-devel.i686 gsm-devel.i686 sane-backends-devel.i686 libXfixes-devel.i686 libpng-static.i686 rust-std-static.i686 libgcrypt-devel.i686 libXpresent-devel.i686)
arch_pkgs_32=(lib32-attr lib32-fontconfig lib32-lcms2 lib32-libxml2 lib32-libxcursor lib32-libxrandr lib32-libxdamage lib32-libxi lib32-gettext lib32-freetype2 lib32-glu lib32-libsm lib32-gcc-libs lib32-libpcap lib32-ncurses lib32-giflib lib32-libpng lib32-gnutls lib32-libxinerama lib32-libxcomposite lib32-libxmu lib32-libxxf86vm lib32-libldap lib32-mpg123 lib32-openal lib32-v4l-utils lib32-alsa-lib lib32-mesa lib32-libgl lib32-libxslt lib32-libpulse lib32-libva lib32-gtk3 lib32-gst-plugins-base-libs lib32-gst-plugins-good lib32-vulkan-icd-loader lib32-sdl2 lib32-libcups lib32-ocl-icd lib32-giflib lib32-libpng lib32-alsa-plugins lib32-libjpeg-turbo lib32-rust-libs lib32-libgcrypt lib32-libusb)
unknown_pkgs_32=() # prevent illegal function call on bad distro, keep this line

#### TOOLS ####

# These functions are used by the rest of this script

_os_name() {
  local _os
  if [ ! -f /etc/os-release ]; then
    if [ -f /etc/debian_version ]; then
      _os="debian"
    elif [ -f /etc/ubuntu_version ]; then
      _os="ubuntu"
    elif [ -f /etc/redhat-release ]; then
      _os="redhat"
    elif [ -f /etc/fedora-release ]; then
      _os="fedora"
    elif [ -f /etc/arch-release ]; then
      _os="arch"
    else
      _os="unknown"
    fi
  else
    _os=$(source /etc/os-release && echo ${ID})
  fi
  # specific fix for linux mint, which had a different ID in /etc/os-release, but supports ubuntu and debian packages
  # so we force the script to use ubuntu's packages (the hack seems to work on virginia and above)
  # - added fix for garuda, endeavouros and cachyos which is arch-based
  # - added fallback to "unknown" for currently unhandled distros
  if [[ "${_os}" == "linuxmint" ]] || [[ "${_os}" == "mint" ]]; then
    _os="ubuntu"
  elif [[ "${_os}" == "garuda" ]] || [[ "${_os}" == "endeavouros" ]] || [[ "${_os}" == "cachyos" ]]; then
    _os="arch"
  elif [[ "${_os}" != @(debian|ubuntu|redhat|fedora|arch|unknown) ]]; then
    warning "Current OS not explicitly handled by our dep resolver or not detected. Falling back to unknown..."
    _os="unknown"
  fi
  echo -ne "${_os}"
}

_country_code() {
  local _lang
  _lang=$(echo -ne "${LANGUAGE}\n${LANG}\n${LC_ALL}" | grep -oP "(?<=_)[A-Z]{2}(?=(\.[a-zA-Z0-9\-]+)?$)" | head -n 1)
  if [ -z "${_lang}" ]; then
    _lang="US"
  fi
  echo -ne "${_lang}"
}

_cmd_exists() {
  local CMD="${1}"
  if [ -z "${CMD}" ]; then
    return 1
  fi
  if command -v "${1}" >/dev/null 2>&1; then
    return 0
  else
    return 1
  fi
}

_auto_su() {
  local _as_root
  if _cmd_exists "sudo"; then
    _as_root="sudo "
    ((EUID)) || _as_root=""
  elif _cmd_exists "gosu"; then
    _as_root="gosu root "
    ((EUID)) || _as_root=""
  elif _cmd_exists "doas"; then
    _as_root="doas "
    ((EUID)) || _as_root=""
  else
    _as_root=""
    msg2 "No known privilege escalation command found."
  fi
  ((EUID)) || _as_root=""
  echo -ne "${_as_root}"
}

_is_installed() {
  local PKG="${1}"
  local _os
  _os=$(_os_name)
  case "${_os}" in
  "debian" | "ubuntu")
    if eval "$(_auto_su)dpkg -l | grep -q \"${PKG}\""; then
      return 0
    else
      return 1
    fi
    ;;
  "fedora")
    if eval "$(_auto_su)rpm -q \"${PKG}\""; then
      return 0
    else
      return 1
    fi
    ;;
  "arch")
    if eval "$(_auto_su)pacman -Qs \"${PKG}\" > /dev/null"; then
      return 0
    else
      return 1
    fi
    ;;
  "unknown")
    return 1
    ;;
  esac
}

#### PACKAGE MANAGEMENT ####

# These functions are used to install and remove packages in an unattended way

_attempt_str() {
  local _try
  if [ -z "${1}" ]; then
    _try=1
  else
    _try=$(($1))
  fi
  if [[ $_try -gt 1 ]]; then
    echo -ne "| Attempt: ${_try}/3"
  fi
  echo -ne ""
}

_update_pkgman_mirror() {
  local _try
  if [ -z "${1}" ]; then
    _try=1
  else
    _try=$(($1))
  fi
  local _os
  _os=$(_os_name)
  local _auto_su
  _auto_su=$(_auto_su)
  local _country_code
  _country_code=$(_country_code)
  local _failed
  _failed="false"
  local _attempt_str
  _attempt_str=$(_attempt_str $_try)
  case "${_os}" in
  "debian" | "ubuntu")
    if ! _cmd_exists "apt-smart"; then
      msg2 "Installing apt-smart | Using pip${_attempt_str}"
      ${_auto_su}pip install apt-smart --break-system-packages || {
        warning "Failed to install apt-smart, cannot update mirror."
        _failed="true"
      }
    fi
    [ "$_failed" = "false" ] && {
      msg2 "Updating mirror | Using apt-smart${_attempt_str}"
      apt-smart --auto-change-mirror || {
        warning "Failed to update mirror | Using apt-smart"
        #buntu 24.04 has changed sources file to deb822 format, not handled by apt-smart
        #_failed="true"
      }
    }
    [ "$_failed" = "false" ] && {
      msg2 "Updating package list | Using apt${_attempt_str}"
      ${_auto_su}apt update -y || {
        warning "Failed to update package list | Using apt"
        _failed="true"
      }
    }
    ;;
  "fedora")
    # TODO: implement fedora mirror update
    msg2 "Updating package list | Using dnf${_attempt_str}"
    ${_auto_su}dnf update -y || {
      warning "Failed to update package list | Using dnf"
      _failed="true"
    }
    ;;
  "arch")
    # TODO: implement arch mirror update
    msg2 "Updating package list | Using pacman${_attempt_str}"
    ${_auto_su}pacman -Sy --noconfirm || {
      warning "Failed to update package list | Using pacman"
      _failed="true"
    }
    ;;
  "unknown")
    error "Unknown distro, cannot update mirror."
    return 1
    ;;
  esac
  if [[ "${_failed}" == "true" ]] && [[ "${_try}" -lt 3 ]]; then
    _try=$(($_try + 1))
    _update_pkgman_mirror $_try
  elif [[ "${_failed}" == "true" ]] && [[ "${_try}" -ge 3 ]]; then
    error "Failed to update mirror after 3 attempts."
    return 1
  elif [[ "${_failed}" == "false" ]]; then
    return 0
  fi
}

_install_pkg() {
  local PKG="${1}"
  if [ -z "${PKG}" ]; then
    return 1
  fi
  shift 1
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
  fi
  if _is_installed "${PKG}"; then
    warning "Package: ${PKG} is already installed."
    return 0
  fi
  shift 1
  local _try
  if [ -z "${1}" ]; then
    _try=1
  else
    _try=$(($1))
  fi
  local _os
  _os=$(_os_name)
  local _failed
  _failed="false"
  local _confirm_str
  local _attempt_str
  _attempt_str=$(_attempt_str $_try)
  case "${_os}" in
  "debian" | "ubuntu" | "linuxmint")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo "-y " || echo " ")
    if [ $_try -gt 1 ]; then
      _update_pkgman_mirror || {
        _failed="true"
      }
    fi
    msg2 "Installing package: ${PKG} | Using apt${_attempt_str}"
    if ! eval "$(_auto_su)apt ${_confirm_str}install \"${PKG}\""; then
      warning "Failed to install package: ${PKG}"
      #buntu is too much of a hassle to work with, everything is broken and I can't be bothered. _failed="true"
    else
      return 0
    fi
    ;;
  "fedora")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo "-y " || echo "")
    msg2 "Installing package: ${PKG} | Using dnf${_attempt_str}"
    if ! eval "$(_auto_su)dnf ${_confirm_str}install \"${PKG}\""; then
      warning "Failed to install package: ${PKG}"
      _failed="true"
    else
      return 0
    fi
    ;;
  "arch")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo "y" || echo "")
    msg2 "Installing package: ${PKG} | Using pacman${_attempt_str}"
    if ! eval "$(_auto_su)pacman -S${_confirm_str} --needed \"${PKG}\""; then
      warning "Failed to install package: ${PKG}"
      _failed="true"
    else
      return 0
    fi
    ;;
  "unknown")
    error "Unknown distro, cannot install package: ${PKG}"
    return 1
    ;;
  esac
  if [[ "${_failed}" == "true" ]] && [[ "${_try}" -lt 3 ]]; then
    _try=$(($_try + 1))
    _install_pkg "${PKG}" "${_confirm}" $_try
  elif [[ "${_failed}" == "true" ]] && [[ "${_try}" -ge 3 ]]; then
    error "Failed to install package: ${PKG} after 3 attempts."
    return 1
  fi
}

_remove_pkg() {
  local PKG="${1}"
  if [ -z "${PKG}" ]; then
    return 1
  fi
  shift 1
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
  fi
  if ! _is_installed "${PKG}"; then
    warning "Package: ${PKG} is already installed."
    return 0
  fi
  shift 1
  local _try
  if [ -z "${1}" ]; then
    _try=1
  else
    _try=$(($1))
  fi
  local _os
  _os=$(_os_name)
  local _failed
  _failed="false"
  local _confirm_str
  local _attempt_str
  _attempt_str=$(_attempt_str $_try)
  case "${_os}" in
  "debian" | "ubuntu" | "linuxmint")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo -ne "-y " || echo -ne " ")
    msg2 "Removing package: ${PKG} | Using apt${_attempt_str}"
    if ! eval "$(_auto_su)apt ${_confirm_str}remove \"${PKG}\""; then
      warning "Failed to remove package: ${PKG}"
      _failed="true"
    else
      return 0
    fi
    ;;
  "fedora")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo -ne "-y " || echo -ne "")
    msg2 "Removing package: ${PKG} | Using dnf${_attempt_str}"
    if eval "$(_auto_su)dnf ${_confirm_str}remove \"${PKG}\""; then
      warning "Failed to remove package: ${PKG}"
      _failed="true"
    else
      return 0
    fi
    ;;
  "arch")
    _confirm_str=$([[ "${_confirm}" == "true" ]] && echo -ne "y" || echo -ne "")
    msg2 "Removing package: ${PKG} | Using pacman${_attempt_str}"
    if ! eval "$(_auto_su)pacman -R${_confirm_str} \"${PKG}\""; then
      warning "Failed to remove package: ${PKG}"
      _failed="true"
    else
      return 0
    fi
    ;;
  "unknown")
    error "Unknown distro, cannot remove package: ${PKG}"
    return 1
    ;;
  esac
  if [[ "${_failed}" == "true" ]] && [[ "${_try}" -lt 3 ]]; then
    _try=$(($_try + 1))
    _remove_pkg "${PKG}" "${_confirm}" $_try
  elif [[ "${_failed}" == "true" ]] && [[ "${_try}" -ge 3 ]]; then
    error "Failed to remove package: ${PKG} after 3 attempts."
    return 1
  fi
}

_install_pkgs() {
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
    shift 1
  fi
  local PKGS
  PKGS=(${*})
  for PKG in "${PKGS[@]}"; do
    _install_pkg "${PKG}" "${_confirm}" || return 1
  done
  return 0
}

_remove_pkgs() {
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
    shift 1
  fi
  local PKGS
  PKGS=(${*})
  for PKG in "${PKGS[@]}"; do
    _remove_pkg "${PKG}" "${_confirm}" || return 1
  done
  return 0
}

#### POST INSTALLATION ACTIONS ####

# These functions allow you to run post-installation actions for each distro.  This is useful for setting up alternatives, or running other commands that are specific to a distro.

_install_post_ubuntu() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    msg2 "Running post-installation action for 64-bit on Ubuntu"
    ${_as_root}update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix || ${_as_root}update-alternatives --config x86_64-w64-mingw32-gcc
    ${_as_root}update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix || ${_as_root}update-alternatives --config x86_64-w64-mingw32-g++
    ${_as_root}update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix || ${_as_root}update-alternatives --config i686-w64-mingw32-gcc
    ${_as_root}update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix || ${_as_root}update-alternatives --config i686-w64-mingw32-g++
  else
    warning "No post-installation action for 32-bit on Ubuntu"
  fi
}

_install_post_debian() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    msg2 "Running post-installation actions for 64-bit on Debian Linux"
    ${_as_root}update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix || ${_as_root}update-alternatives --config x86_64-w64-mingw32-gcc
    ${_as_root}update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix || ${_as_root}update-alternatives --config x86_64-w64-mingw32-g++
    ${_as_root}update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix || ${_as_root}update-alternatives --config i686-w64-mingw32-gcc
    ${_as_root}update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix || ${_as_root}update-alternatives --config i686-w64-mingw32-g++
  else
    warning "No post-installation action for 32-bit on Debian Linux"
  fi
}

_install_post_fedora() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-installation actions for 64-bit on Fedora"
  else
    warning "No post-installation actions for 32-bit on Fedora"
  fi
}

_install_post_arch() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-installation actions for 64-bit on Arch Linux"
  else
    warning "No post-installation actions for 32-bit on Arch Linux"
  fi
}

# This function is called when the distro is unknown, to prevent an illegal function call
_install_post_unknown() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-installation actions for 64-bit on unknown distro"
  else
    warning "No post-installation actions for 32-bit on unknown distro"
  fi
}

#### POST REMOVAL ACTIONS ####

# These functions allow you to run post-removal actions for each distro.  This is useful for setting up alternatives, or running other commands that are specific to a distro.
_remove_post_ubuntu() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    msg2 "Running post-removal action for 64-bit on Ubuntu"
    {
      ${_as_root}update-alternatives --remove x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
      ${_as_root}update-alternatives --remove x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      ${_as_root}update-alternatives --remove i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
      ${_as_root}update-alternatives --remove i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
    } || {
      error "Failed to run post-removal actions for 64-bit on Ubuntu"
      return 1
    }
  else
    warning "No post-removal action for 32-bit on Ubuntu"
    return 0
  fi
}

_remove_post_debian() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    msg2 "Running post-removal actions for 64-bit on Debian Linux"
    {
      ${_as_root}update-alternatives --remove x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
      ${_as_root}update-alternatives --remove x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
      ${_as_root}update-alternatives --remove i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
      ${_as_root}update-alternatives --remove i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
    } || {
      error "Failed to run post-removal actions for 64-bit on Debian Linux"
      return 1
    }
    return 0
  else
    warning "No post-removal action for 32-bit on Debian Linux"
  fi
}

_remove_post_fedora() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-removal actions for 64-bit on Fedora"
    return 0
  else
    warning "No post-removal actions for 32-bit on Fedora"
    return 0
  fi
}

_remove_post_arch() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-removal actions for 64-bit on Arch Linux"
    return 0
  else
    warning "No post-removal actions for 32-bit on Arch Linux"
    return 0
  fi
}

# This function is called when the distro is unknown, to prevent an illegal function call
_remove_post_unknown() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _as_root
  _as_root=$(_auto_su)
  if [[ "${_arch}" == "64" ]]; then
    warning "No post-removal actions for 64-bit on unknown distro"
    return 0
  else
    warning "No post-removal actions for 32-bit on unknown distro"
    return 0
  fi
}

#### MAIN FUNCTIONS ####

# These functions raise all the other functionality of this script

# usage: _install_deps [arch] [confirm]
install_deps() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
  fi
  local _as_root
  _as_root=$(_auto_su)
  local _os
  _os=$(_os_name)
  msg2 ""
  msg2 "Installing ${_arch}-bit dependencies for ${_os}"
  local _var="${_os}_pkgs_${_arch}[@]"
  _install_pkgs "${_confirm}" "${!_var}" || return 1
  _install_post_${_os} "${_arch}" || return 1
  return 0
}

# usage: _remove_deps [arch] [confirm]
remove_deps() {
  local _arch
  if [ -z "${1}" ]; then
    _arch="64"
  else
    _arch="${1}"
    shift 1
  fi
  if [[ "${_arch}" != "32" ]] && [[ "${_arch}" != "64" ]]; then
    _arch="64" # default to 64-bit if invalid arch is passed
  fi
  local _confirm
  if [ -z "${1}" ]; then
    _confirm="false"
  else
    _confirm="${1}"
  fi
  local _as_root
  _as_root=$(_auto_su)
  local _os
  _os=$(_os_name)
  msg2 ""
  msg2 "Removing ${_arch}-bit dependencies for ${_os}"
  local _var="${_os}_pkgs_${_arch}[@]"
  _remove_pkgs "${_confirm}" "${!_var}" || return 1
  _remove_post_${_os} "${_arch}" || return 1
  return 0
}
